(function(global,factory){typeof exports==='object'&&typeof module!=='undefined'?factory(exports):typeof define==='function'&&define.amd?define(['exports'],factory):(factory((global.RabbitEar={})))}(this,(function(exports){'use strict';var EPSILON_LOW=0.003;var EPSILON=0.00001;var EPSILON_HIGH=0.00000001;var EPSILON_UI=0.05;class Tree{constructor(thisObject){this.obj=thisObject;this.parent=undefined;this.children=[]}}
function isValidPoint(point){return(point!==undefined&&!isNaN(point.x)&&!isNaN(point.y))}
function isValidNumber(n){return(n!==undefined&&!isNaN(n)&&!isNaN(n))}
function epsilonEqual(a,b,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return(Math.abs(a-b)<epsilon)}
function cleanNumber(num,decimalPlaces){if(Math.floor(num)==num||decimalPlaces==undefined){return num}
return parseFloat(num.toFixed(decimalPlaces))}
function counterClockwiseInteriorAngleRadians(a,b){while(a<0){a+=Math.PI*2}
while(b<0){b+=Math.PI*2}
var b_a=b-a;if(b_a>=0)return b_a;return Math.PI*2-(a-b)}
function clockwiseInteriorAngle(a,b){var dotProduct=b.x*a.x+b.y*a.y;var determinant=b.x*a.y-b.y*a.x;var angle=Math.atan2(determinant,dotProduct);if(angle<0){angle+=Math.PI*2}
return angle}
function counterClockwiseInteriorAngle(a,b){var dotProduct=a.x*b.x+a.y*b.y;var determinant=a.x*b.y-a.y*b.x;var angle=Math.atan2(determinant,dotProduct);if(angle<0){angle+=Math.PI*2}
return angle}
function bisectVectors(a,b){a=a.normalize();b=b.normalize();return[(a.add(b)).normalize(),new XY(-a.x+ -b.x,-a.y+ -b.y).normalize()]}
function intersect_vec_func(aOrigin,aVec,bOrigin,bVec,compFunction,epsilon){function determinantXY(a,b){return a.x*b.y-b.x*a.y}
var denominator0=determinantXY(aVec,bVec);var denominator1=-denominator0;if(epsilonEqual(denominator0,0,epsilon)){return undefined}
var numerator0=determinantXY(bOrigin.subtract(aOrigin),bVec);var numerator1=determinantXY(aOrigin.subtract(bOrigin),aVec);var t0=numerator0/denominator0;var t1=numerator1/denominator1;if(compFunction(t0,t1)){return aOrigin.add(aVec.scale(t0))}}
function intersectionLineLine(a,b,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return intersect_vec_func(new XY(a.point.x,a.point.y),new XY(a.direction.x,a.direction.y),new XY(b.point.x,b.point.y),new XY(b.direction.x,b.direction.y),function(t0,t1){return!0},epsilon)}
function intersectionLineRay(line,ray,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return intersect_vec_func(new XY(line.point.x,line.point.y),new XY(line.direction.x,line.direction.y),new XY(ray.origin.x,ray.origin.y),new XY(ray.direction.x,ray.direction.y),function(t0,t1){return t1>=-epsilon},epsilon)}
function intersectionLineEdge(line,edge,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return intersect_vec_func(new XY(line.point.x,line.point.y),new XY(line.direction.x,line.direction.y),new XY(edge.nodes[0].x,edge.nodes[0].y),new XY(edge.nodes[1].x-edge.nodes[0].x,edge.nodes[1].y-edge.nodes[0].y),function(t0,t1){return t1>=-epsilon&&t1<=1+epsilon},epsilon)}
function intersectionRayRay(a,b,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return intersect_vec_func(new XY(a.origin.x,a.origin.y),new XY(a.direction.x,a.direction.y),new XY(b.origin.x,b.origin.y),new XY(b.direction.x,b.direction.y),function(t0,t1){return t0>=-epsilon&&t1>=-epsilon},epsilon)}
function intersectionRayEdge(ray,edge,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return intersect_vec_func(new XY(ray.origin.x,ray.origin.y),new XY(ray.direction.x,ray.direction.y),new XY(edge.nodes[0].x,edge.nodes[0].y),new XY(edge.nodes[1].x-edge.nodes[0].x,edge.nodes[1].y-edge.nodes[0].y),function(t0,t1){return t0>=-epsilon&&t1>=-epsilon&&t1<=1+epsilon},epsilon)}
function intersectionEdgeEdge(a,b,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return intersect_vec_func(new XY(a.nodes[0].x,a.nodes[0].y),new XY(a.nodes[1].x-a.nodes[0].x,a.nodes[1].y-a.nodes[0].y),new XY(b.nodes[0].x,b.nodes[0].y),new XY(b.nodes[1].x-b.nodes[0].x,b.nodes[1].y-b.nodes[0].y),function(t0,t1){return t0>=-epsilon&&t0<=1+epsilon&&t1>=-epsilon&&t1<=1+epsilon},epsilon)}
function intersectionCircleLine(center,radius,p0,p1){var r_squared=Math.pow(radius,2);var x1=p0.x-center.x;var y1=p0.y-center.y;var x2=p1.x-center.x;var y2=p1.y-center.y;var dx=x2-x1;var dy=y2-y1;var dr_squared=dx*dx+dy*dy;var D=x1*y2-x2*y1;function sgn(x){if(x<0){return-1}return 1}
var x1=(D*dy+sgn(dy)*dx*Math.sqrt(r_squared*dr_squared-(D*D)))/(dr_squared);var x2=(D*dy-sgn(dy)*dx*Math.sqrt(r_squared*dr_squared-(D*D)))/(dr_squared);var y1=(-D*dx+Math.abs(dy)*Math.sqrt(r_squared*dr_squared-(D*D)))/(dr_squared);var y2=(-D*dx-Math.abs(dy)*Math.sqrt(r_squared*dr_squared-(D*D)))/(dr_squared);var intersections=[];if(!isNaN(x1)){intersections.push(new XY(x1+center.x,y1+center.y))}
if(!isNaN(x2)){intersections.push(new XY(x2+center.x,y2+center.y))}
return intersections}
class Matrix{constructor(a,b,c,d,tx,ty){this.a=(a!==undefined)?a:1;this.b=(b!==undefined)?b:0;this.c=(c!==undefined)?c:0;this.d=(d!==undefined)?d:1;this.tx=(tx!==undefined)?tx:0;this.ty=(ty!==undefined)?ty:0}
identity(){this.a=1;this.b=0;this.c=0;this.d=1;this.tx=0;this.ty=0;return this}
mult(mat){var r=new Matrix();r.a=this.a*mat.a+this.c*mat.b;r.c=this.a*mat.c+this.c*mat.d;r.tx=this.a*mat.tx+this.c*mat.ty+this.tx;r.b=this.b*mat.a+this.d*mat.b;r.d=this.b*mat.c+this.d*mat.d;r.ty=this.b*mat.tx+this.d*mat.ty+this.ty;return r}
inverted(){var determinant=this.a*this.d-this.b*this.c;if(!determinant||isNaN(determinant)||!isFinite(this.tx)||!isFinite(this.ty)){return undefined}
return new Matrix(this.d/determinant,-this.b/determinant,-this.c/determinant,this.a/determinant,(this.c*this.ty-this.d*this.tx)/determinant,(this.b*this.tx-this.a*this.ty)/determinant)}
reflection(vector,offset){var angle=Math.atan2(vector.y,vector.x);var cosAngle=Math.cos(angle);var sinAngle=Math.sin(angle);var _cosAngle=Math.cos(-angle);var _sinAngle=Math.sin(-angle);this.a=cosAngle*_cosAngle+sinAngle*_sinAngle;this.b=cosAngle*-_sinAngle+sinAngle*_cosAngle;this.c=sinAngle*_cosAngle+ -cosAngle*_sinAngle;this.d=sinAngle*-_sinAngle+ -cosAngle*_cosAngle;if(offset!==undefined){this.tx=offset.x+this.a*-offset.x+ -offset.y*this.c;this.ty=offset.y+this.b*-offset.x+ -offset.y*this.d}
return this}
rotation(angle,origin){this.a=Math.cos(angle);this.c=-Math.sin(angle);this.b=Math.sin(angle);this.d=Math.cos(angle);if(origin!==undefined){this.tx=origin.x;this.ty=origin.y}
return this}
copy(){var m=new Matrix();m.a=this.a;m.c=this.c;m.tx=this.tx;m.b=this.b;m.d=this.d;m.ty=this.ty;return m}}
class XY{constructor(x,y){this.x=x;this.y=y}
equivalent(point,epsilon){if(epsilon==undefined){epsilon=EPSILON_HIGH}
return(epsilonEqual(this.x,point.x,epsilon)&&epsilonEqual(this.y,point.y,epsilon))}
normalize(){var m=this.magnitude();return new XY(this.x/m,this.y/m)}
dot(point){return this.x*point.x+this.y*point.y}
cross(vector){return this.x*vector.y-this.y*vector.x}
magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}
distanceTo(a){return Math.sqrt(Math.pow(this.x-a.x,2)+Math.pow(this.y-a.y,2))}
transform(matrix){return new XY(this.x*matrix.a+this.y*matrix.c+matrix.tx,this.x*matrix.b+this.y*matrix.d+matrix.ty)}
translate(dx,dy){return new XY(this.x+dx,this.y+dy)}
rotate90(){return new XY(-this.y,this.x)}
rotate180(){return new XY(-this.x,-this.y)}
rotate270(){return new XY(this.y,-this.x)}
rotate(angle,origin){return this.transform(new Matrix().rotation(angle,origin))}
lerp(point,pct){var inv=1.0-pct;return new XY(this.x*pct+point.x*inv,this.y*pct+point.y*inv)}
midpoint(other){return new XY((this.x+other.x)*0.5,(this.y+other.y)*0.5)}
reflect(line){var origin=(line.direction!=undefined)?(line.point||line.origin):new XY(line.nodes[0].x,line.nodes[0].y);var vector=(line.direction!=undefined)?line.direction:new XY(line.nodes[1].x,line.nodes[1].y).subtract(origin);return this.transform(new Matrix().reflection(vector,origin))}
scale(magnitude){return new XY(this.x*magnitude,this.y*magnitude)}
add(a,b){if(isValidPoint(a)){return new XY(this.x+a.x,this.y+a.y)}
else if(isValidNumber(b)){return new XY(this.x+a,this.y+b)}}
subtract(point){return new XY(this.x-point.x,this.y-point.y)}
multiply(m){return new XY(this.x*m.x,this.y*m.y)}
abs(){return new XY(Math.abs(this.x),Math.abs(this.y))}
commonX(point,epsilon){return epsilonEqual(this.x,point.x,epsilon)}
commonY(point,epsilon){return epsilonEqual(this.y,point.y,epsilon)}}
class Line{constructor(a,b,c,d){if(a.x!==undefined){this.point=new XY(a.x,a.y);this.direction=new XY(b.x,b.y)}
else{this.point=new XY(a,b);this.direction=new XY(c,d)}}
rays(){var a=new Ray(this.point,this.direction);return[a,a.flip()]}
length(){return Infinity}
vector(){return this.direction}
parallel(line,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
var v=(line.nodes!==undefined)?new XY(line.nodes[1].x-line.nodes[0].x,line.nodes[1].y-line.nodes[0].y):line.direction;return(v!==undefined)?epsilonEqual(this.direction.cross(v),0,epsilon):undefined}
collinear(point,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
var x=[this.point.x,this.point.x+this.direction.x,point.x];var y=[this.point.y,this.point.y+this.direction.y,point.y];return epsilonEqual(x[0]*(y[1]-y[2])+x[1]*(y[2]-y[0])+x[2]*(y[0]-y[1]),0,epsilon)}
equivalent(line,epsilon){return this.collinear(line.point,epsilon)&&this.parallel(line,epsilon)}
degenrate(epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return epsilonEqual(this.direction.magnitude(),0,epsilon)}
intersection(line,epsilon){if(line instanceof Line){return intersectionLineLine(this,line,epsilon)}
if(line instanceof Ray){return intersectionLineRay(this,line,epsilon)}
if(line instanceof Edge){return intersectionLineEdge(this,line,epsilon)}}
reflectionMatrix(){return new Matrix().reflection(this.direction,this.point)}
nearestPoint(point){return this.nearestPointNormalTo(point)}
nearestPointNormalTo(point){var v=this.direction.normalize();var u=((point.x-this.point.x)*v.x+(point.y-this.point.y)*v.y);return new XY(this.point.x+u*v.x,this.point.y+u*v.y)}
transform(matrix){return undefined}
bisect(line){if(this.parallel(line)){return[new Line(this.point.midpoint(line.point),this.direction)]}else{var intersection=intersectionLineLine(this,line);var vectors=bisectVectors(this.direction,line.direction);vectors[1]=vectors[1].rotate90();if(Math.abs(this.direction.cross(vectors[1]))<Math.abs(this.direction.cross(vectors[0]))){var swap=vectors[0];vectors[0]=vectors[1];vectors[1]=swap}
return vectors.map(function(el){return new Line(intersection,el)},this)}}
subsect(line,count){var pcts=Array.apply(null,Array(count)).map(function(el,i){return i/count});pcts.shift();if(this.parallel(line)){return pcts.map(function(pct){return new Line(this.point.lerp(line.point,pct),this.direction)},this)}else{var intersection=intersectionLineLine(this,line);return[[new Sector(intersection,[intersection.add(this.direction),intersection.add(line.direction)]),new Sector(intersection,[intersection.add(this.direction),intersection.add(line.direction.rotate180())])].sort(function(a,b){return a.angle()-b.angle()}).shift(),[new Sector(intersection,[intersection.add(line.direction),intersection.add(this.direction)]),new Sector(intersection,[intersection.add(line.direction),intersection.add(this.direction.rotate180())])].sort(function(a,b){return a.angle()-b.angle()}).shift()].map(function(sector){return sector.subsect(count)},this).reduce(function(prev,curr){return prev.concat(curr)},[]).map(function(ray){return new Line(ray.origin,ray.direction)},this)}}}
class Ray{constructor(a,b,c,d){if(a.x!==undefined){this.origin=new XY(a.x,a.y);this.direction=new XY(b.x,b.y)}
else{this.origin=new XY(a,b);this.direction=new XY(c,d)}}
length(){return Infinity}
vector(){return this.direction}
parallel(line,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
var v=(line.nodes!==undefined)?new XY(line.nodes[1].x-line.nodes[0].x,line.nodes[1].y-line.nodes[0].y):line.direction;if(v===undefined){return undefined}
return epsilonEqual(this.direction.cross(v),0,epsilon)}
collinear(point,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
var pOrigin=new XY(point.x-this.origin.x,point.y-this.origin.y);var dot=pOrigin.dot(this.direction);if(dot<-epsilon){return!1}
var cross=pOrigin.cross(this.direction);return epsilonEqual(cross,0,epsilon)}
equivalent(ray,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return(this.origin.equivalent(ray.origin,epsilon)&&this.direction.normalize().equivalent(ray.direction.normalize(),epsilon))}
degenrate(epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return epsilonEqual(this.direction.magnitude(),0,epsilon)}
intersection(line,epsilon){if(line instanceof Ray){return intersectionRayRay(this,line,epsilon)}
if(line instanceof Line){return intersectionLineRay(line,this,epsilon)}
if(line instanceof Edge){return intersectionRayEdge(this,line,epsilon)}}
reflectionMatrix(){return new Matrix().reflection(this.direction,this.origin)}
nearestPoint(point){var answer=this.nearestPointNormalTo(point);if(answer!==undefined){return answer}
return this.origin}
nearestPointNormalTo(point){var v=this.direction.normalize();var u=((point.x-this.origin.x)*v.x+(point.y-this.origin.y)*v.y);if(u<0){return undefined}
return new XY(this.origin.x+u*v.x,this.origin.y+u*v.y)}
transform(matrix){return new Ray(this.origin.transform(matrix),this.direction.transform(matrix))}
flip(){return new Ray(this.origin,new XY(-this.direction.x,-this.direction.y))}
clipWithEdge(edge,epsilon){var intersect=intersectionRayEdge(this,edge,epsilon);if(intersect===undefined){return undefined}
return new Edge(this.origin,intersect)}
clipWithEdges(edges,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return edges.map(function(edge){return this.clipWithEdge(edge)},this).filter(function(edge){return edge!==undefined}).map(function(edge){return{edge:edge,length:edge.length()}}).filter(function(el){return el.length>epsilon}).sort(function(a,b){return a.length-b.length}).map(function(el){return el.edge})}
intersectionsWithEdges(edges,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return edges.map(function(edge){return intersectionRayEdge(this,edge,epsilon)},this).filter(function(point){return point!==undefined},this).map(function(point){return{point:point,length:point.distanceTo(this.origin)}},this).sort(function(a,b){return a.length-b.length}).map(function(el){return el.point},this)}
clipWithEdgesDetails(edges,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return edges.map(function(edge){return{'edge':this.clipWithEdge(edge),'intersection':edge}},this).filter(function(el){return el.edge!==undefined}).map(function(el){return{'edge':el.edge,'intersection':el.intersection,'length':el.edge.length()}}).filter(function(el){return el.length>epsilon}).sort(function(a,b){return a.length-b.length}).map(function(el){return{edge:el.edge,intersection:el.intersection}})}}
class Edge{constructor(a,b,c,d){if(a.x!==undefined){this.nodes=[new XY(a.x,a.y),new XY(b.x,b.y)]}
else if(isValidNumber(d)){this.nodes=[new XY(a,b),new XY(c,d)]}
else if(a.nodes!==undefined){this.nodes=[new XY(a.nodes[0].x,a.nodes[0].y),new XY(a.nodes[1].x,a.nodes[1].y)]}}
length(){return Math.sqrt(Math.pow(this.nodes[0].x-this.nodes[1].x,2)+Math.pow(this.nodes[0].y-this.nodes[1].y,2))}
vector(originNode){if(originNode===undefined){return this.nodes[1].subtract(this.nodes[0])}
if(this.nodes[0].equivalent(originNode)){return this.nodes[1].subtract(this.nodes[0])}
return this.nodes[0].subtract(this.nodes[1])}
parallel(line,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
var v=(line.nodes!==undefined)?new XY(line.nodes[1].x-line.nodes[0].x,line.nodes[1].y-line.nodes[0].y):line.direction;if(v===undefined){return undefined}
var u=this.nodes[1].subtract(this.nodes[0]);return epsilonEqual(u.cross(v),0,epsilon)}
collinear(point,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
var p0=new Edge(point,this.nodes[0]).length();var p1=new Edge(point,this.nodes[1]).length();return epsilonEqual(this.length()-p0-p1,0,epsilon)}
equivalent(e,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return((this.nodes[0].equivalent(e.nodes[0],epsilon)&&this.nodes[1].equivalent(e.nodes[1],epsilon))||(this.nodes[0].equivalent(e.nodes[1],epsilon)&&this.nodes[1].equivalent(e.nodes[0],epsilon)))}
degenrate(epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return this.nodes[0].equivalent(this.nodes[1],epsilon)}
intersection(line,epsilon){if(line instanceof Edge){return intersectionEdgeEdge(this,line,epsilon)}
if(line instanceof Line){return intersectionLineEdge(line,this,epsilon)}
if(line instanceof Ray){return intersectionRayEdge(line,this,epsilon)}}
reflectionMatrix(){return new Matrix().reflection(this.nodes[1].subtract(this.nodes[0]),this.nodes[0])}
nearestPoint(point){var answer=this.nearestPointNormalTo(point);if(answer!==undefined){return answer}
return this.nodes.map(function(el){return{point:el,distance:el.distanceTo(point)}},this).sort(function(a,b){return a.distance-b.distance}).shift().point}
nearestPointNormalTo(point){var p=this.nodes[0].distanceTo(this.nodes[1]);var u=((point.x-this.nodes[0].x)*(this.nodes[1].x-this.nodes[0].x)+(point.y-this.nodes[0].y)*(this.nodes[1].y-this.nodes[0].y))/(Math.pow(p,2));if(u<0||u>1.0){return undefined}
return new XY(this.nodes[0].x+u*(this.nodes[1].x-this.nodes[0].x),this.nodes[0].y+u*(this.nodes[1].y-this.nodes[0].y))}
transform(matrix){return new Edge(this.nodes[0].transform(matrix),this.nodes[1].transform(matrix))}
midpoint(){return new XY(0.5*(this.nodes[0].x+this.nodes[1].x),0.5*(this.nodes[0].y+this.nodes[1].y))}
perpendicularBisector(){return new Line(this.midpoint(),this.vector().rotate90())}
infiniteLine(){return new Line(this.nodes[0],this.nodes[1].subtract(this.nodes[0]))}}
class Polyline{constructor(){this.nodes=[]}
edges(){var result=[];for(var i=0;i<this.nodes.length-1;i++){result.push(new Edge(this.nodes[i],this.nodes[i+1]))}
return result}
rayReflectRepeat(ray,intersectable,target){const REFLECT_LIMIT=666;var clips=[];var firstClips=ray.clipWithEdgesDetails(intersectable);if(firstClips.length==0){return this}
if(target!==undefined&&epsilonEqual(ray.direction.cross(target.subtract(ray.origin)),0,EPSILON_HIGH)){if(firstClips.length===0||ray.origin.distanceTo(target)<firstClips[0].edge.length()){this.nodes=[ray.origin,target];return this}}
clips.push(firstClips[0]);var i=0;while(i<REFLECT_LIMIT){var prevClip=clips[clips.length-1];var n0=new XY(prevClip.intersection.nodes[0].x,prevClip.intersection.nodes[0].y);var n1=new XY(prevClip.intersection.nodes[1].x,prevClip.intersection.nodes[1].y);var reflection=new Matrix().reflection(n1.subtract(n0),n0);var newRay=new Ray(prevClip.edge.nodes[1],prevClip.edge.nodes[0].transform(reflection).subtract(prevClip.edge.nodes[1]));var newClips=newRay.clipWithEdgesDetails(intersectable);if(target!==undefined&&epsilonEqual(newRay.direction.cross(target.subtract(newRay.origin)),0,EPSILON_HIGH)){clips.push({edge:new Edge(newRay.origin,target),intersection:undefined});break}
if(newClips.length===0||newClips[0]===undefined){break}
clips.push(newClips[0]);i++}
this.nodes=clips.map(function(el){return el.edge.nodes[0]});this.nodes.push(clips[clips.length-1].edge.nodes[1]);return this}}
class Rect{constructor(x,y,width,height){this.origin={'x':x,'y':y};this.size={'width':width,'height':height}}
contains(point,epsilon){if(epsilon==undefined){epsilon=0}
return point.x>this.origin.x-epsilon&&point.y>this.origin.y-epsilon&&point.x<this.origin.x+this.size.width+epsilon&&point.y<this.origin.y+this.size.height+epsilon}}
class Triangle{constructor(points,circumcenter){this.points=points;this.edges=this.points.map(function(el,i){var nextEl=this.points[(i+1)%this.points.length];return new Edge(el,nextEl)},this);this.sectors=this.points.map(function(el,i){var prevI=(i+this.points.length-1)%this.points.length;var nextI=(i+1)%this.points.length;return new Sector(el,[this.points[prevI],this.points[nextI]])},this);this.circumcenter=circumcenter}
angles(){return this.points.map(function(p,i){var prevP=this.points[(i+this.points.length-1)%this.points.length];var nextP=this.points[(i+1)%this.points.length];return clockwiseInteriorAngle(nextP.subtract(p),prevP.subtract(p))},this)}
incenter(){var sides=this.edges.map(function(e){return e.length()},this);sides.push(sides.shift());var perimeter=sides.reduce(function(prev,curr){return prev+curr},0);return sides.reduce(function(prev,curr,i){return prev.add(this.points[i].scale(curr))}.bind(this),new XY(0,0)).scale(1/perimeter)}
isAcute(){var a=this.angles();for(var i=0;i<a.length;i++){if(a[i]>Math.PI*0.5){return!1}}
return!0}
isObtuse(){var a=this.angles();for(var i=0;i<a.length;i++){if(a[i]>Math.PI*0.5){return!0}}
return!1}
isRight(){var a=this.angles();for(var i=0;i<a.length;i++){if(epsilonEqual(a[i],Math.PI*0.5)){return!0}}
return!1}
pointInside(p){for(var i=0;i<this.points.length;i++){var p0=this.points[i];var p1=this.points[(i+1)%this.points.length];var cross=(p.y-p0.y)*(p1.x-p0.x)-(p.x-p0.x)*(p1.y-p0.y);if(cross<0)return!1}
return!0}}
class Circle{constructor(a,b,c){if(c!==undefined){this.center=new XY(a,b);this.radius=c}else{this.center=a;this.radius=b}}
intersection(line){if(line instanceof Line){return intersectionCircleLine(this.center,this.radius,line.point,line.point.add(line.direction))}
if(line instanceof Edge){return intersectionCircleLine(this.center,this.radius,line.nodes[0],line.nodes[1])}
if(line instanceof Ray){return intersectionCircleLine(this.center,this.radius,line.origin,line.origin.add(line.direction))}}}
class Polygon{constructor(){this.nodes=[]}
equivalent(polygon){if(polygon.nodes.length!=this.nodes.length){return!1}
var iFace=undefined;polygon.nodes.forEach(function(n,i){if(n===this.nodes[0]){iFace=i;return}},this);if(iFace==undefined){return!1}
for(var i=0;i<this.nodes.length;i++){var iFaceMod=(iFace+i)%this.nodes.length;if(this.nodes[i]!==polygon.nodes[iFaceMod]){return!1}}
return!0}
contains(point){var isInside=!1;for(var i=0,j=this.nodes.length-1;i<this.nodes.length;j=i++){if((this.nodes[i].y>point.y)!=(this.nodes[j].y>point.y)&&point.x<(this.nodes[j].x-this.nodes[i].x)*(point.y-this.nodes[i].y)/(this.nodes[j].y-this.nodes[i].y)+this.nodes[i].x){isInside=!isInside}}
return isInside}
signedArea(){return 0.5*this.nodes.map(function(el,i){var nextEl=this.nodes[(i+1)%this.nodes.length];return el.x*nextEl.y-nextEl.x*el.y},this).reduce(function(prev,cur){return prev+cur},0)}
centroid(){return this.nodes.map(function(el,i){var nextEl=this.nodes[(i+1)%this.nodes.length];var mag=el.x*nextEl.y-nextEl.x*el.y;return new XY((el.x+nextEl.x)*mag,(el.y+nextEl.y)*mag)},this).reduce(function(prev,current){return prev.add(current)},new XY(0,0)).scale(1/(6*this.signedArea()))}
center(){var xMin=Infinity,xMax=0,yMin=Infinity,yMax=0;for(var i=0;i<this.nodes.length;i++){if(this.nodes[i].x>xMax){xMax=this.nodes[i].x}
if(this.nodes[i].x<xMin){xMin=this.nodes[i].x}
if(this.nodes[i].y>yMax){yMax=this.nodes[i].y}
if(this.nodes[i].y<yMin){yMin=this.nodes[i].y}}
return new XY(xMin+(xMax-xMin)*0.5,yMin+(yMax-yMin)*0.5)}
transform(matrix){this.nodes.forEach(function(node){node.transform(matrix)},this)}}
class ConvexPolygon{constructor(){this.edges=[]}
nodes(){return this.edges.map(function(el,i){var nextEl=this.edges[(i+1)%this.edges.length];if(el.nodes[0].equivalent(nextEl.nodes[0])||el.nodes[0].equivalent(nextEl.nodes[1])){return el.nodes[1]}
return el.nodes[0]},this)}
signedArea(nodes){if(nodes===undefined){nodes=this.nodes()}
return 0.5*nodes.map(function(el,i){var nextEl=nodes[(i+1)%nodes.length];return el.x*nextEl.y-nextEl.x*el.y},this).reduce(function(prev,cur){return prev+cur},0)}
centroid(){var nodes=this.nodes();return nodes.map(function(el,i){var nextEl=nodes[(i+1)%nodes.length];var mag=el.x*nextEl.y-nextEl.x*el.y;return new XY((el.x+nextEl.x)*mag,(el.y+nextEl.y)*mag)},this).reduce(function(prev,current){return prev.add(current)},new XY(0,0)).scale(1/(6*this.signedArea(nodes)))}
center(){var xMin=Infinity,xMax=0,yMin=Infinity,yMax=0;var nodes=this.edges.map(function(el){return el.nodes[0]});for(var i=0;i<nodes.length;i++){if(nodes[i].x>xMax){xMax=nodes[i].x}
if(nodes[i].x<xMin){xMin=nodes[i].x}
if(nodes[i].y>yMax){yMax=nodes[i].y}
if(nodes[i].y<yMin){yMin=nodes[i].y}}
return new XY(xMin+(xMax-xMin)*0.5,yMin+(yMax-yMin)*0.5)}
contains(p){for(var i=0;i<this.edges.length;i++){var a=this.edges[i].nodes[1].subtract(this.edges[i].nodes[0]);var b=new XY(p.x-this.edges[i].nodes[0].x,p.y-this.edges[i].nodes[0].y);if(a.cross(b)<0){return!1}}
return!0}
liesOnEdge(p){for(var i=0;i<this.edges.length;i++){if(this.edges[i].collinear(p)){return!0}}
return!1}
clipEdge(edge){var intersections=this.edges.map(function(el){return intersectionEdgeEdge(edge,el)}).filter(function(el){return el!==undefined}).filter(function(el){return!el.equivalent(edge.nodes[0])&&!el.equivalent(edge.nodes[1])});switch(intersections.length){case 0:if(this.contains(edge.nodes[0])){return edge}
return undefined;case 1:if(this.contains(edge.nodes[0])){return new Edge(edge.nodes[0],intersections[0])}
return new Edge(edge.nodes[1],intersections[0]);default:for(var i=1;i<intersections.length;i++){if(!intersections[0].equivalent(intersections[i])){return new Edge(intersections[0],intersections[i])}}}}
clipLine(line){var intersections=this.edges.map(function(el){return intersectionLineEdge(line,el)}).filter(function(el){return el!==undefined});switch(intersections.length){case 0:return undefined;case 1:return new Edge(intersections[0],intersections[0]);default:for(var i=1;i<intersections.length;i++){if(!intersections[0].equivalent(intersections[i])){return new Edge(intersections[0],intersections[i])}}}}
clipRay(ray){var intersections=this.edges.map(function(el){return intersectionRayEdge(ray,el)}).filter(function(el){return el!==undefined});switch(intersections.length){case 0:return undefined;case 1:return new Edge(ray.origin,intersections[0]);default:for(var i=1;i<intersections.length;i++){if(!intersections[0].equivalent(intersections[i])){return new Edge(intersections[0],intersections[i])}}}}
setEdgesFromPoints(points){this.edges=points.map(function(el,i){var nextEl=points[(i+1)%points.length];return new Edge(el,nextEl)},this);return this}
regularPolygon(sides){var halfwedge=2*Math.PI/sides*0.5;var radius=Math.cos(halfwedge);var points=[];for(var i=0;i<sides;i++){var a=-2*Math.PI*i/sides+halfwedge;var x=cleanNumber(radius*Math.sin(a),14);var y=cleanNumber(radius*Math.cos(a),14);points.push(new XY(x,y))}
this.setEdgesFromPoints(points);return this}
convexHull(points){if(points===undefined||points.length===0){this.edges=[];return undefined}
var INFINITE_LOOP=10000;var sorted=points.slice().sort(function(a,b){if(epsilonEqual(a.y,b.y,EPSILON_HIGH)){return a.x-b.x}
return a.y-b.y});var hull=[];hull.push(sorted[0]);var ang=0;var infiniteLoop=0;do{infiniteLoop++;var h=hull.length-1;var angles=sorted.filter(function(el){return!(epsilonEqual(el.x,hull[h].x,EPSILON_HIGH)&&epsilonEqual(el.y,hull[h].y,EPSILON_HIGH))}).map(function(el){var angle=Math.atan2(hull[h].y-el.y,hull[h].x-el.x);while(angle<ang){angle+=Math.PI*2}
return{node:el,angle:angle,distance:undefined}}).sort(function(a,b){return(a.angle<b.angle)?-1:(a.angle>b.angle)?1:0});if(angles.length===0){this.edges=[];return undefined}
var rightTurn=angles[0];angles=angles.filter(function(el){return epsilonEqual(rightTurn.angle,el.angle,EPSILON_LOW)}).map(function(el){var distance=Math.sqrt(Math.pow(hull[h].x-el.node.x,2)+Math.pow(hull[h].y-el.node.y,2));el.distance=distance;return el}).sort(function(a,b){return(a.distance<b.distance)?1:(a.distance>b.distance)?-1:0});if(hull.filter(function(el){return el===angles[0].node}).length>0){return this.setEdgesFromPoints(hull)}
hull.push(angles[0].node);ang=Math.atan2(hull[h].y-angles[0].node.y,hull[h].x-angles[0].node.x)}while(infiniteLoop<INFINITE_LOOP);this.edges=[];return undefined}
minimumRect(){var minX=Infinity,maxX=-Infinity,minY=Infinity,maxY=-Infinity;this.nodes().forEach(function(el){if(el.x>maxX){maxX=el.x}
if(el.x<minX){minX=el.x}
if(el.y>maxY){maxY=el.y}
if(el.y<minY){minY=el.y}});return new Rect(minX,minY,maxX-minX,maxY-minY)}
copy(){var p=new ConvexPolygon();p.edges=this.edges.map(function(e){return new Edge(e.nodes[0].x,e.nodes[0].y,e.nodes[1].x,e.nodes[1].y)});return p}}
class Sector{constructor(origin,endpoints){this.origin=origin;this.endPoints=endpoints}
vectors(){return this.endPoints.map(function(el){return new XY(el.x-this.origin.x,el.y-this.origin.y)},this)}
angle(){var vectors=this.vectors();return counterClockwiseInteriorAngle(vectors[0],vectors[1])}
bisect(){var vectors=this.vectors();var angles=vectors.map(function(el){return Math.atan2(el.y,el.x)});while(angles[0]<0){angles[0]+=Math.PI*2}
while(angles[1]<0){angles[1]+=Math.PI*2}
var interior=counterClockwiseInteriorAngleRadians(angles[0],angles[1]);var bisected=angles[0]+interior*0.5;return new Ray(new XY(this.origin.x,this.origin.y),new XY(Math.cos(bisected),Math.sin(bisected)))}
subsect(divisions){if(divisions==undefined||divisions<2){throw "subset() requires number parameter > 1"}
var angles=this.vectors().map(function(el){return Math.atan2(el.y,el.x)});while(angles[0]<0){angles[0]+=Math.PI*2}
while(angles[1]<0){angles[1]+=Math.PI*2}
var interior=counterClockwiseInteriorAngleRadians(angles[0],angles[1]);var rays=[];for(var i=1;i<divisions;i++){var angle=angles[0]+interior*(i/divisions);rays.push(new Ray(new XY(this.origin.x,this.origin.y),new XY(Math.cos(angle),Math.sin(angle))))}
return rays}
equivalent(a){return a.origin.equivalent(this.origin)&&a.endPoints[0].equivalent(this.endPoints[0])&&a.endPoints[1].equivalent(this.endPoints[1])}
contains(point){var cross0=(point.y-this.endPoints[0].y)*(this.origin.x-this.endPoints[0].x)-(point.x-this.endPoints[0].x)*(this.origin.y-this.endPoints[0].y);var cross1=(point.y-this.origin.y)*(this.endPoints[1].x-this.origin.x)-(point.x-this.origin.x)*(this.endPoints[1].y-this.origin.y);return cross0<0&&cross1<0}
sortByClockwise(){}}
var geometry=Object.freeze({EPSILON_LOW:EPSILON_LOW,EPSILON:EPSILON,EPSILON_HIGH:EPSILON_HIGH,EPSILON_UI:EPSILON_UI,Tree:Tree,counterClockwiseInteriorAngleRadians:counterClockwiseInteriorAngleRadians,clockwiseInteriorAngle:clockwiseInteriorAngle,intersectionRayEdge:intersectionRayEdge,Matrix:Matrix,XY:XY,Line:Line,Ray:Ray,Edge:Edge,Polyline:Polyline,Rect:Rect,Triangle:Triangle,Circle:Circle,Polygon:Polygon,ConvexPolygon:ConvexPolygon,Sector:Sector});class GraphClean{constructor(numNodes,numEdges){this.nodes={total:0,isolated:0};this.edges={total:0,duplicate:0,circular:0};if(numNodes!=undefined){this.nodes.total=numNodes}
if(numEdges!=undefined){this.edges.total=numEdges}}
join(report){this.nodes.total+=report.nodes.total;this.edges.total+=report.edges.total;this.nodes.isolated+=report.nodes.isolated;this.edges.duplicate+=report.edges.duplicate;this.edges.circular+=report.edges.circular;return this}
isolatedNodes(num){this.nodes.isolated=num;this.nodes.total+=num;return this}
duplicateEdges(num){this.edges.duplicate=num;this.edges.total+=num;return this}
circularEdges(num){this.edges.circular=num;this.edges.total+=num;return this}}
class GraphNode{constructor(graph){this.graph=graph;this.cache={}}
adjacentEdges(){return this.graph.edges.filter(function(el){return el.nodes[0]===this||el.nodes[1]===this},this)}
adjacentNodes(){var checked=[];return this.adjacentEdges().filter(function(el){return!el.isCircular()}).map(function(el){if(el.nodes[0]===this){return el.nodes[1]}
return el.nodes[0]},this).filter(function(el){return checked.indexOf(el)>=0?!1:checked.push(el)},this)}
isAdjacentToNode(node){return(this.graph.getEdgeConnectingNodes(this,node)!==undefined)}
degree(){return this.graph.edges.map(function(el){var sum=0;if(el.nodes[0]===this){sum+=1}
if(el.nodes[1]===this){sum+=1}
return sum},this).reduce(function(a,b){return a+b})}}
class GraphEdge{constructor(graph,node1,node2){this.graph=graph;this.nodes=[node1,node2];this.cache={}}
adjacentEdges(){return this.graph.edges.filter(function(el){return el!==this&&(el.nodes[0]===this.nodes[0]||el.nodes[0]===this.nodes[1]||el.nodes[1]===this.nodes[0]||el.nodes[1]===this.nodes[1])},this)}
adjacentNodes(){return[this.nodes[0],this.nodes[1]]}
isAdjacentToEdge(edge){return((this.nodes[0]===edge.nodes[0])||(this.nodes[1]===edge.nodes[1])||(this.nodes[0]===edge.nodes[1])||(this.nodes[1]===edge.nodes[0]))}
isSimilarToEdge(edge){return((this.nodes[0]===edge.nodes[0]&&this.nodes[1]===edge.nodes[1])||(this.nodes[0]===edge.nodes[1]&&this.nodes[1]===edge.nodes[0]))}
otherNode(node){if(this.nodes[0]===node){return this.nodes[1]}
if(this.nodes[1]===node){return this.nodes[0]}
return undefined}
isCircular(){return this.nodes[0]===this.nodes[1]}
duplicateEdges(){return this.graph.edges.filter(function(el){return this.isSimilarToEdge(el)},this)}
commonNodeWithEdge(otherEdge){if(this===otherEdge)return undefined;if(this.nodes[0]===otherEdge.nodes[0]||this.nodes[0]===otherEdge.nodes[1])
return this.nodes[0];if(this.nodes[1]===otherEdge.nodes[0]||this.nodes[1]===otherEdge.nodes[1])
return this.nodes[1];return undefined}
uncommonNodeWithEdge(otherEdge){if(this===otherEdge)return undefined;if(this.nodes[0]===otherEdge.nodes[0]||this.nodes[0]===otherEdge.nodes[1])
return this.nodes[1];if(this.nodes[1]===otherEdge.nodes[0]||this.nodes[1]===otherEdge.nodes[1])
return this.nodes[0];return undefined}}
class Graph{constructor(){this.nodes=[];this.edges=[];this.nodeType=GraphNode;this.edgeType=GraphEdge}
newNode(){return this.addNode(new this.nodeType(this))}
newEdge(node1,node2){return this.addEdge(new this.edgeType(this,node1,node2))}
addNode(node){if(node==undefined){throw "addNode() requires an argument: 1 GraphNode"}
node.graph=this;node.index=this.nodes.length;this.nodes.push(node);return node}
addEdge(edge){if(edge.nodes[0]===undefined||edge.nodes[1]===undefined||edge.nodes[0].graph!==this||edge.nodes[1].graph!==this){return undefined}
edge.graph=this;edge.index=this.edges.length;this.edges.push(edge);return edge}
addNodes(nodes){if(nodes===undefined||nodes.length<=0){throw "addNodes() must contain array of GraphNodes"}
var len=this.nodes.length;var checkedNodes=nodes.filter(function(el){return(el instanceof GraphNode)});this.nodes=this.nodes.concat(checkedNodes);for(var i=len;i<this.nodes.length;i++){this.nodes[i].graph=this;this.nodes[i].index=i}
return this.nodes.length-len}
addEdges(edges){if(edges==undefined||edges.length<=0){throw "addEdges() must contain array of GraphEdges"}
var len=this.edges.length;var checkedEdges=edges.filter(function(el){return(el instanceof GraphEdge)});this.edges=this.edges.concat(checkedEdges);for(var i=len;i<this.edges.length;i++){this.edges[i].graph=this}
this.cleanGraph();return this.edges.length-len}
copyNode(node){return Object.assign(this.newNode(),node)}
copyEdge(edge){return Object.assign(this.newEdge(edge.nodes[0],edge.nodes[1]),edge)}
clear(){this.nodes=[];this.edges=[];return this}
removeEdge(edge){var edgesLength=this.edges.length;this.edges=this.edges.filter(function(el){return el!==edge});this.edgeArrayDidChange();return new GraphClean(undefined,edgesLength-this.edges.length)}
removeEdgeBetween(node1,node2){var edgesLength=this.edges.length;this.edges=this.edges.filter(function(el){return!((el.nodes[0]===node1&&el.nodes[1]===node2)||(el.nodes[0]===node2&&el.nodes[1]===node1))});this.edgeArrayDidChange();return new GraphClean(undefined,edgesLength-this.edges.length)}
removeNode(node){var nodesLength=this.nodes.length;var edgesLength=this.edges.length;this.nodes=this.nodes.filter(function(el){return el!==node});this.edges=this.edges.filter(function(el){return el.nodes[0]!==node&&el.nodes[1]!==node});if(this.edges.length!=edgesLength){this.edgeArrayDidChange()}
if(this.nodes.length!=nodesLength){this.nodeArrayDidChange()}
return new GraphClean(nodesLength-this.nodes.length,edgesLength-this.edges.length)}
mergeNodes(node1,node2){if(node1===node2){return undefined}
this.edges.forEach(function(edge){if(edge.nodes[0]===node2){edge.nodes[0]=node1}
if(edge.nodes[1]===node2){edge.nodes[1]=node1}},this);var nodesLength=this.nodes.length;this.nodes=this.nodes.filter(function(el){return el!==node2});return new GraphClean(nodesLength-this.nodes.length).join(this.cleanGraph())}
removeNodeIfIsolated(node){if(this.edges.filter(function(edge){return edge.nodes[0]===node||edge.nodes[1]===node},this).length===0){return new GraphClean()}this.nodes=this.nodes.filter(function(el){return el!==node});this.nodeArrayDidChange();return new GraphClean(1,0)}
removeIsolatedNodes(){this.nodeArrayDidChange();var nodeDegree=[];for(var i=0;i<this.nodes.length;i++){nodeDegree[i]=!1}
for(var i=0;i<this.edges.length;i++){nodeDegree[this.edges[i].nodes[0].index]=!0;nodeDegree[this.edges[i].nodes[1].index]=!0}
var nodeLength=this.nodes.length;this.nodes=this.nodes.filter(function(el,i){return nodeDegree[i]});var isolatedCount=nodeLength-this.nodes.length;if(isolatedCount>0){this.nodeArrayDidChange()}
return new GraphClean().isolatedNodes(isolatedCount)}
removeCircularEdges(){var edgesLength=this.edges.length;this.edges=this.edges.filter(function(el){return el.nodes[0]!==el.nodes[1]});if(this.edges.length!=edgesLength){this.edgeArrayDidChange()}
return new GraphClean().circularEdges(edgesLength-this.edges.length)}
removeDuplicateEdges(){var count=0;for(var i=0;i<this.edges.length-1;i++){for(var j=this.edges.length-1;j>i;j--){if(this.edges[i].isSimilarToEdge(this.edges[j])){this.edges.splice(j,1);count+=1}}}
if(count>0){this.edgeArrayDidChange()}
return new GraphClean().duplicateEdges(count)}
cleanGraph(){this.edgeArrayDidChange();this.nodeArrayDidChange();var dups=this.removeDuplicateEdges();var circ=this.removeCircularEdges();return dups.join(circ)}
clean(){return this.cleanGraph()}
getEdgeConnectingNodes(node1,node2){for(var i=0;i<this.edges.length;i++){if((this.edges[i].nodes[0]===node1&&this.edges[i].nodes[1]===node2)||(this.edges[i].nodes[0]===node2&&this.edges[i].nodes[1]===node1)){return this.edges[i]}}
return undefined}
getEdgesConnectingNodes(node1,node2){return this.edges.filter(function(el){return(el.nodes[0]===node1&&el.nodes[1]===node2)||(el.nodes[0]===node2&&el.nodes[1]===node1)})}
copy(){this.nodeArrayDidChange();this.edgeArrayDidChange();var g=new Graph();for(var i=0;i<this.nodes.length;i++){var n=g.addNode(new GraphNode(g));Object.assign(n,this.nodes[i]);n.graph=g;n.index=i}
for(var i=0;i<this.edges.length;i++){var index=[this.edges[i].nodes[0].index,this.edges[i].nodes[1].index];var e=g.addEdge(new GraphEdge(g,g.nodes[index[0]],g.nodes[index[1]]));Object.assign(e,this.edges[i]);e.graph=g;e.index=i;e.nodes=[g.nodes[index[0]],g.nodes[index[1]]]}
return g}
connectedGraphs(){var cp=this.copy();cp.clean();cp.removeIsolatedNodes();cp.nodes.forEach(function(node){node.cache.adj=node.adjacentEdges().length},this);var graphs=[];while(cp.edges.length>0){var graph=new Graph();cp.nodes.forEach(function(node){graph.addNode(Object.assign(new cp.nodeType(graph),node))},this);var node=cp.nodes.slice().sort(function(a,b){return b.cache.adj-a.cache.adj})[0];var adj=node.adjacentEdges();while(adj.length>0){var smartList=adj.filter(function(el){return el.otherNode(node).cache.adj%2==0},this);if(smartList.length==0){smartList=adj}
var nextEdge=smartList.sort(function(a,b){return b.otherNode(node).cache.adj-a.otherNode(node).cache.adj})[0];var nextNode=nextEdge.otherNode(node);var newEdge=Object.assign(new cp.edgeType(graph,undefined,undefined),nextEdge);newEdge.nodes=[graph.nodes[node.index],graph.nodes[nextNode.index]];graph.addEdge(newEdge);node.cache.adj-=1;nextNode.cache.adj-=1;cp.edges=cp.edges.filter(function(el){return el!==nextEdge});node=nextNode;adj=node.adjacentEdges()}
graph.removeIsolatedNodes();graphs.push(graph)}
return graphs}
nodeArrayDidChange(){for(var i=0;i<this.nodes.length;i++){this.nodes[i].index=i}}
edgeArrayDidChange(){for(var i=0;i<this.edges.length;i++){this.edges[i].index=i}}}
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)
module.exports=t();else if("function"==typeof define&&define.amd)
define([],t);else{var i;i="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,i.rbush=t()}}(function(){return function t(i,n,e){function r(h,o){if(!n[h]){if(!i[h]){var s="function"==typeof require&&require;if(!o&&s)
return s(h,!0);if(a)
return a(h,!0);var l=new Error("Cannot find module '"+h+"'");throw l.code="MODULE_NOT_FOUND",l}
var f=n[h]={exports:{}};i[h][0].call(f.exports,function(t){var n=i[h][1][t];return r(n?n:t)},f,f.exports,t,i,n,e)}return n[h].exports}for(var a="function"==typeof require&&require,h=0;h<e.length;h++)
r(e[h]);return r}({1:[function(t,i,n){function e(t,i){return this instanceof e?(this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),i&&this._initFormat(i),void this.clear()):new e(t,i)}
function r(t,i,n){if(!n)
return i.indexOf(t);for(var e=0;e<i.length;e++)
if(n(t,i[e]))
return e;return-1}
function a(t,i){h(t,0,t.children.length,i,t)}
function h(t,i,n,e,r){r||(r=p(null)),r.minX=1/0,r.minY=1/0,r.maxX=-(1/0),r.maxY=-(1/0);for(var a,h=i;h<n;h++)
a=t.children[h],o(r,t.leaf?e(a):a);return r}
function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}
function s(t,i){return t.minX-i.minX}
function l(t,i){return t.minY-i.minY}
function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}
function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}
function c(t,i){return(Math.max(i.maxX,t.maxX)-Math.min(i.minX,t.minX))*(Math.max(i.maxY,t.maxY)-Math.min(i.minY,t.minY))}
function m(t,i){var n=Math.max(t.minX,i.minX),e=Math.max(t.minY,i.minY),r=Math.min(t.maxX,i.maxX),a=Math.min(t.maxY,i.maxY);return Math.max(0,r-n)*Math.max(0,a-e)}
function d(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}
function x(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}
function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-(1/0),maxY:-(1/0)}}
function M(t,i,n,e,r){for(var a,h=[i,n];h.length;)
n=h.pop(),i=h.pop(),n-i<=e||(a=i+Math.ceil((n-i)/e/2)*e,g(t,a,i,n,r),h.push(i,a,a,n));}
i.exports=e;var g=t("quickselect");e.prototype={all:function(){return this._all(this.data,[])},search:function(t){var i=this.data,n=[],e=this.toBBox;if(!x(t,i))
return n;for(var r,a,h,o,s=[];i;){for(r=0,a=i.children.length;r<a;r++)
h=i.children[r],o=i.leaf?e(h):h,x(t,o)&&(i.leaf?n.push(h):d(t,o)?this._all(h,n):s.push(h));i=s.pop()}return n},collides:function(t){var i=this.data,n=this.toBBox;if(!x(t,i))
return!1;for(var e,r,a,h,o=[];i;){for(e=0,r=i.children.length;e<r;e++)
if(a=i.children[e],h=i.leaf?n(a):a,x(t,h)){if(i.leaf||d(t,h))
return!0;o.push(a)}
i=o.pop()}return!1},load:function(t){if(!t||!t.length)
return this;if(t.length<this._minEntries){for(var i=0,n=t.length;i<n;i++)
this.insert(t[i]);return this}var e=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)
if(this.data.height===e.height)
this._splitRoot(this.data,e);else{if(this.data.height<e.height){var r=this.data;this.data=e,e=r}
this._insert(e,this.data.height-e.height-1,!0)}
else this.data=e;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=p([]),this},remove:function(t,i){if(!t)
return this;for(var n,e,a,h,o=this.data,s=this.toBBox(t),l=[],f=[];o||l.length;){if(o||(o=l.pop(),e=l[l.length-1],n=f.pop(),h=!0),o.leaf&&(a=r(t,o.children,i),a!==-1))
return o.children.splice(a,1),l.push(o),this._condense(l),this;h||o.leaf||!d(o,s)?e?(n++,o=e.children[n],h=!1):o=null:(l.push(o),f.push(n),n=0,e=o,o=o.children[0])}return this},toBBox:function(t){return t},compareMinX:s,compareMinY:l,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,i){for(var n=[];t;)
t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},_build:function(t,i,n,e){var r,h=n-i+1,o=this._maxEntries;if(h<=o)
return r=p(t.slice(i,n+1)),a(r,this.toBBox),r;e||(e=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,e-1))),r=p([]),r.leaf=!1,r.height=e;var s,l,f,u,c=Math.ceil(h/o),m=c*Math.ceil(Math.sqrt(o));for(M(t,i,n,m,this.compareMinX),s=i;s<=n;s+=m)
for(f=Math.min(s+m-1,n),M(t,s,f,c,this.compareMinY),l=s;l<=f;l+=c)
u=Math.min(l+c-1,f),r.children.push(this._build(t,l,u,e-1));return a(r,this.toBBox),r},_chooseSubtree:function(t,i,n,e){for(var r,a,h,o,s,l,u,m;;){if(e.push(i),i.leaf||e.length-1===n)
break;for(u=m=1/0,r=0,a=i.children.length;r<a;r++)
h=i.children[r],s=f(h),l=c(t,h)-s,l<m?(m=l,u=s<u?s:u,o=h):l===m&&s<u&&(u=s,o=h);i=o||i.children[0]}return i},_insert:function(t,i,n){var e=this.toBBox,r=n?t:e(t),a=[],h=this._chooseSubtree(r,this.data,i,a);for(h.children.push(t),o(h,r);i>=0&&a[i].children.length>this._maxEntries;)
this._split(a,i),i--;this._adjustParentBBoxes(r,a,i)},_split:function(t,i){var n=t[i],e=n.children.length,r=this._minEntries;this._chooseSplitAxis(n,r,e);var h=this._chooseSplitIndex(n,r,e),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},_splitRoot:function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},_chooseSplitIndex:function(t,i,n){var e,r,a,o,s,l,u,c;for(l=u=1/0,e=i;e<=n-i;e++)
r=h(t,0,e,this.toBBox),a=h(t,e,n,this.toBBox),o=m(r,a),s=f(r)+f(a),o<l?(l=o,c=e,u=s<u?s:u):o===l&&s<u&&(u=s,c=e);return c},_chooseSplitAxis:function(t,i,n){var e=t.leaf?this.compareMinX:s,r=t.leaf?this.compareMinY:l,a=this._allDistMargin(t,i,n,e),h=this._allDistMargin(t,i,n,r);a<h&&t.children.sort(e)},_allDistMargin:function(t,i,n,e){t.children.sort(e);var r,a,s=this.toBBox,l=h(t,0,i,s),f=h(t,n-i,n,s),c=u(l)+u(f);for(r=i;r<n-i;r++)
a=t.children[r],o(l,t.leaf?s(a):a),c+=u(l);for(r=n-i-1;r>=i;r--)
a=t.children[r],o(f,t.leaf?s(a):a),c+=u(f);return c},_adjustParentBBoxes:function(t,i,n){for(var e=n;e>=0;e--)
o(i[e],t);},_condense:function(t){for(var i,n=t.length-1;n>=0;n--)
0===t[n].children.length?n>0?(i=t[n-1].children,i.splice(i.indexOf(t[n]),1)):this.clear():a(t[n],this.toBBox);},_initFormat:function(t){var i=["return a"," - b",";"];this.compareMinX=new Function("a","b",i.join(t[0])),this.compareMinY=new Function("a","b",i.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}}},{quickselect:2}],2:[function(t,i,n){function e(t,i,n,a,h){for(;a>n;){if(a-n>600){var o=a-n+1,s=i-n+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),c=Math.max(n,Math.floor(i-s*f/o+u)),m=Math.min(a,Math.floor(i+(o-s)*f/o+u));e(t,i,c,m,h)}
var d=t[i],x=n,p=a;for(r(t,n,i),h(t[a],d)>0&&r(t,n,a);x<p;){for(r(t,x,p),x++,p--;h(t[x],d)<0;)
x++;for(;h(t[p],d)>0;)
p--}
0===h(t[n],d)?r(t,n,p):(p++,r(t,p,a)),p<=i&&(n=p+1),i<=p&&(a=p-1)}}
function r(t,i,n){var e=t[i];t[i]=t[n],t[n]=e}
i.exports=e},{}]},{},[1])(1)});function isValidPoint$1(point){return(point!==undefined&&!isNaN(point.x)&&!isNaN(point.y))}
function isValidNumber$1(n){return(n!==undefined&&!isNaN(n)&&!isNaN(n))}
function epsilonEqual$1(a,b,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
return(Math.abs(a-b)<epsilon)}
function gimme1XY(a,b){if(isValidPoint$1(a)){return new XY(a.x,a.y)}
if(isValidNumber$1(b)){return new XY(a,b)}
if(a.constructor===Array){return new XY(a[0],a[1])}}
function gimme2XY(a,b,c,d){if(a instanceof XY&&b instanceof XY){return[a,b]}
if(isValidPoint$1(b)){return[new XY(a.x,a.y),new XY(b.x,b.y)]}
if(isValidNumber$1(d)){return[new XY(a,b),new XY(c,d)]}}
class PlanarClean extends GraphClean{constructor(numNodes,numEdges){super(numNodes,numEdges);this.edges={total:0,duplicate:0,circular:0};this.nodes={total:0,isolated:0,fragment:[],collinear:[],duplicate:[]};if(numNodes!=undefined){this.nodes.total+=numNodes}
if(numEdges!=undefined){this.edges.total+=numEdges}}
fragmentedNodes(nodes){this.nodes.fragment=nodes;this.nodes.total+=nodes.length;return this}
collinearNodes(nodes){this.nodes.collinear=nodes;this.nodes.total+=nodes.length;return this}
duplicateNodes(nodes){this.nodes.duplicate=nodes;this.nodes.total+=nodes.length;return this}
join(report){this.nodes.total+=report.nodes.total;this.edges.total+=report.edges.total;this.nodes.isolated+=report.nodes.isolated;this.edges.duplicate+=report.edges.duplicate;this.edges.circular+=report.edges.circular;var planarReport=report;if(planarReport.nodes.fragment!=undefined){this.nodes.fragment=this.nodes.fragment.concat(planarReport.nodes.fragment)}
if(planarReport.nodes.collinear!=undefined){this.nodes.collinear=this.nodes.collinear.concat(planarReport.nodes.collinear)}
if(planarReport.nodes.duplicate!=undefined){this.nodes.duplicate=this.nodes.duplicate.concat(planarReport.nodes.duplicate)}
return this}}
class PlanarNode extends GraphNode{copy(){return new XY(this.x,this.y)}
junction(){if(this.graph.unclean){this.graph.clean()}
return this.graph.junctions.slice().filter(function(junction){return junction.origin===this},this).shift()}
sectors(){if(this.graph.unclean){this.graph.clean()}
return this.graph.sectors.filter(function(el){return el.origin===this},this)}
interiorAngles(){return this.junction().interiorAngles()}
adjacentFaces(){if(this.graph.unclean){this.graph.clean()}
return this.graph.faces.filter(function(face){return face.nodes.filter(function(n){return n===this},this).length>0},this)}
adjacentEdges(){return this.graph.edges.filter(function(el){return el.nodes[0]===this||el.nodes[1]===this},this).map(function(el){var other=el.otherNode(this);return{'edge':el,'angle':Math.atan2(other.y-this.y,other.x-this.x)}},this).map(function(el){if(el.angle<0){el.angle+=2*Math.PI}return el}).sort(function(a,b){return a.angle-b.angle}).map(function(el){return el.edge})}
setPosition(x,y){this.x=x;this.y=y;return this}
transform(matrix){var t=new XY(this.x*matrix.a+this.y*matrix.c+matrix.tx,this.x*matrix.b+this.y*matrix.d+matrix.ty);this.x=t.x;this.y=t.y;return this}
translate(dx,dy){this.x+=dx;this.y+=dy;return this}
rotate(angle,origin){return this.transform(new Matrix().rotation(angle,origin))}
reflect(line){var origin=(line.direction!=undefined)?(line.point||line.origin):new XY(line.nodes[0].x,line.nodes[0].y);var vector=(line.direction!=undefined)?line.direction:new XY(line.nodes[1].x,line.nodes[1].y).subtract(origin);return this.transform(new Matrix().reflection(vector,origin))}
equivalent(point,epsilon){return new XY(this.x,this.y).equivalent(point,epsilon)}
normalize(){var m=this.magnitude();return new XY(this.x/m,this.y/m)}dot(point){return this.x*point.x+this.y*point.y}cross(vector){return this.x*vector.y-this.y*vector.x}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}distanceTo(a){return Math.sqrt(Math.pow(this.x-a.x,2)+Math.pow(this.y-a.y,2))}rotate90(){return new XY(-this.y,this.x)}rotate180(){return new XY(-this.x,-this.y)}rotate270(){return new XY(this.y,-this.x)}lerp(point,pct){var inv=1.0-pct;return new XY(this.x*pct+point.x*inv,this.y*pct+point.y*inv)}midpoint(other){return new XY((this.x+other.x)*0.5,(this.y+other.y)*0.5)}scale(magnitude){return new XY(this.x*magnitude,this.y*magnitude)}add(a,b){if(isValidPoint$1(a)){return new XY(this.x+a.x,this.y+a.y)}else if(isValidNumber$1(b)){return new XY(this.x+a,this.y+b)}}subtract(point){return new XY(this.x-point.x,this.y-point.y)}multiply(m){return new XY(this.x*m.x,this.y*m.y)}abs(){return new XY(Math.abs(this.x),Math.abs(this.y))}commonX(point,epsilon){return epsilonEqual$1(this.x,point.x,epsilon)}commonY(point,epsilon){return epsilonEqual$1(this.y,point.y,epsilon)}}
class PlanarEdge extends GraphEdge{copy(){return new Edge(this.nodes[0].copy(),this.nodes[1].copy())}
adjacentFaces(){if(this.graph.unclean){this.graph.clean()}
return this.graph.faces.filter(function(face){return face.edges.filter(function(edge){return edge===this},this).length>0},this)}
boundingBox(epsilon){if(epsilon==undefined){epsilon=0}
var xs=this.nodes[0].x<this.nodes[1].x?[this.nodes[0].x,this.nodes[1].x]:[this.nodes[1].x,this.nodes[0].x];var ys=this.nodes[0].y<this.nodes[1].y?[this.nodes[0].y,this.nodes[1].y]:[this.nodes[1].y,this.nodes[0].y];var eps2=epsilon*2;return new Rect(xs[0]-epsilon,ys[0]-epsilon,xs[1]-xs[0]+eps2,ys[1]-ys[0]+eps2)}
intersection(edge,epsilon){if(typeof(edge).isAdjacentToEdge==="function"&&this.isAdjacentToEdge(edge)){return undefined}
var intersect=this.copy().intersection(edge.copy(),epsilon);if(intersect!=undefined&&!(intersect.equivalent(this.nodes[0],epsilon)||intersect.equivalent(this.nodes[1],epsilon))){return intersect}}
transform(matrix){return new Edge(this.nodes[0].transform(matrix),this.nodes[1].transform(matrix))}
parallel(edge,epsilon){return new Edge(this).parallel(new Edge(edge),epsilon)}
collinear(point,epsilon){return new Edge(this).collinear(point,epsilon)}
equivalent(e,epsilon){return((this.nodes[0].equivalent(e.nodes[0],epsilon)&&this.nodes[1].equivalent(e.nodes[1],epsilon))||(this.nodes[0].equivalent(e.nodes[1],epsilon)&&this.nodes[1].equivalent(e.nodes[0],epsilon)))}
degenrate(epsilon){return this.nodes[0].equivalent(this.nodes[1],epsilon)}
length(){return Math.sqrt(Math.pow(this.nodes[0].x-this.nodes[1].x,2)+Math.pow(this.nodes[0].y-this.nodes[1].y,2))}vector(originNode){if(originNode==undefined){return this.nodes[1].subtract(this.nodes[0])}if(this.nodes[0].equivalent(originNode)){return this.nodes[1].subtract(this.nodes[0])}return this.nodes[0].subtract(this.nodes[1])}reflectionMatrix(){return new Matrix().reflection(this.nodes[1].subtract(this.nodes[0]),this.nodes[0])}nearestPoint(point){var answer=this.nearestPointNormalTo(point);if(answer!==undefined){return answer}return this.nodes.map(function(el){return{point:el,distance:el.distanceTo(point)}},this).sort(function(a,b){return a.distance-b.distance}).shift().point}nearestPointNormalTo(point){var p=this.nodes[0].distanceTo(this.nodes[1]);var u=((point.x-this.nodes[0].x)*(this.nodes[1].x-this.nodes[0].x)+(point.y-this.nodes[0].y)*(this.nodes[1].y-this.nodes[0].y))/(Math.pow(p,2));if(u<0||u>1.0){return undefined}return new XY(this.nodes[0].x+u*(this.nodes[1].x-this.nodes[0].x),this.nodes[0].y+u*(this.nodes[1].y-this.nodes[0].y))}midpoint(){return new XY(0.5*(this.nodes[0].x+this.nodes[1].x),0.5*(this.nodes[0].y+this.nodes[1].y))}perpendicularBisector(){return new Line(this.midpoint(),this.vector().rotate90())}infiniteLine(){return new Line(this.nodes[0],this.nodes[1].subtract(this.nodes[0]))}}
class PlanarFace extends Polygon{constructor(graph){super();this.graph=graph;this.nodes=[];this.edges=[]}
sectors(){if(this.graph.unclean);var options=this.graph.sectors.filter(function(sector){return this.nodes.filter(function(node){return node===sector.origin},this).length>0},this);return this.edges.map(function(el,i){var nextEl=this.edges[(i+1)%this.edges.length];return options.filter(function(sector){return sector.edges[1]===el&&sector.edges[0]===nextEl},this).shift()},this)}
commonEdges(face){return this.edges.filter(function(edge){return face.edges.filter(function(fe){return fe===edge},this).length>0},this)}
uncommonEdges(face){return this.edges.filter(function(edge){return face.edges.filter(function(fe){return fe===edge},this).length==0},this)}
edgeAdjacentFaces(){var allFaces=this.graph.faces.filter(function(el){return!this.equivalent(el)},this);return this.edges.map(function(ed){for(var i=0;i<allFaces.length;i++){var adjArray=allFaces[i].edges.filter(function(ef){return ed===ef});if(adjArray.length>0){return allFaces[i]}}},this).filter(function(el){return el!==undefined})}
nodeAdjacentFaces(){var allFaces=this.graph.faces.filter(function(el){return!this.equivalent(el)},this);return this.nodes.map(function(node){for(var i=0;i<allFaces.length;i++){var adjArray=allFaces[i].nodes.filter(function(nf){return node===nf});if(adjArray.length>0){return allFaces[i]}}},this).filter(function(el){return el!==undefined})}
adjacentFaceArray(){if(this.graph.unclean){this.graph.clean()}
else{this.graph.faceArrayDidChange()}
var current=this;var visited=[current];var list=[[{"face":current,"parent":undefined}]];do{var totalRoundAdjacent=[];list[list.length-1].forEach(function(current){totalRoundAdjacent=totalRoundAdjacent.concat(current.face.edgeAdjacentFaces().filter(function(face){return visited.filter(function(el){return el===face},this).length==0},this).map(function(face){visited.push(face);return{"face":face,"parent":current}},this))});list[list.length]=totalRoundAdjacent}while(list[list.length-1].length>0);if(list.length>0&&list[list.length-1].length==0){list.pop()}
return list}
adjacentFaceTree(){var array=this.adjacentFaceArray();array[0][0].tree=new Tree(array[0][0].face);for(var r=1;r<array.length;r++){for(var c=0;c<array[r].length;c++){var newNode=new Tree(array[r][c].face);newNode.parent=array[r][c].parent.tree;newNode.parent.children.push(newNode);array[r][c].tree=newNode}}
return array[0][0].tree}}
class PlanarSector extends Sector{constructor(edge1,edge2){super(edge1.commonNodeWithEdge(edge2),undefined);if(this.origin===undefined){return}
if(edge1===edge2){return}
this.edges=[edge1,edge2];this.endPoints=[(edge1.nodes[0]===this.origin)?edge1.nodes[1]:edge1.nodes[0],(edge2.nodes[0]===this.origin)?edge2.nodes[1]:edge2.nodes[0]]}
equivalent(a){return((a.edges[0].isSimilarToEdge(this.edges[0])&&a.edges[1].isSimilarToEdge(this.edges[1]))||(a.edges[0].isSimilarToEdge(this.edges[1])&&a.edges[1].isSimilarToEdge(this.edges[0])))}}
class PlanarJunction{constructor(node){this.origin=node;this.sectors=[];this.edges=[];if(node===undefined){return}
this.edges=this.origin.adjacentEdges();if(this.edges.length<=1){return}
this.sectors=this.edges.map(function(el,i){return new this.origin.graph.sectorType(el,this.edges[(i+1)%this.edges.length])},this)}
nodes(){return this.edges.map(function(edge){return edge.otherNode(this.origin)},this)}
faces(){if(this.origin.graph.unclean){this.origin.graph.clean()}
return this.origin.graph.faces.filter(function(face){return face.nodes.filter(function(node){return node===this.origin},this).length>0},this)}
edgeAngles(){return this.nodes().map(function(node){return new XY(node.x,node.y).subtract(this.origin)}).map(function(vec){return Math.atan2(vec.y,vec.x)},this)}
edgeVectors(){return this.edges.map(function(el){return el.vector(this.origin)},this)}
edgeVectorsNormalized(){return this.edges.map(function(el){return el.vector(this.origin).normalize()},this)}
sectorWithEdges(a,b){var found=undefined;this.sectors.forEach(function(el){if((el.edges[0].equivalent(a)&&el.edges[1].equivalent(b))||(el.edges[1].equivalent(a)&&el.edges[0].equivalent(b))){found=el;return found}},this);return found}
interiorAngles(){return this.sectors.map(function(el){return el.angle()},this)}
clockwiseNode(fromNode){for(var i=0;i<this.edges.length;i++){if(this.edges[i].otherNode(this.origin)===fromNode){return this.edges[(i+this.edges.length-1)%this.edges.length].otherNode(this.origin)}}}
counterClockwiseNode(fromNode){for(var i=0;i<this.edges.length;i++){if(this.edges[i].otherNode(this.origin)===fromNode){return this.edges[(i+1)%this.edges.length].otherNode(this.origin)}}}
clockwiseEdge(fromEdge){var index=this.edges.indexOf(fromEdge);if(index===-1){return undefined}
return this.edges[(index+this.edges.length-1)%this.edges.length]}
counterClockwiseEdge(fromEdge){var index=this.edges.indexOf(fromEdge);if(index===-1){return undefined}
return this.edges[(index+1)%this.edges.length]}}
class PlanarGraph extends Graph{constructor(){super();this.faces=[];this.sectors=[];this.junctions=[];this.nodeType=PlanarNode;this.edgeType=PlanarEdge;this.faceType=PlanarFace;this.sectorType=PlanarSector;this.junctionType=PlanarJunction}
clean(epsilon){this.unclean=!1;var report=new PlanarClean();report.join(this.cleanDuplicateNodes(epsilon));this.fragmentCollinearNodes(epsilon);report.join(this.cleanDuplicateNodes(epsilon));report.join(this.fragment(epsilon));report.join(this.cleanDuplicateNodes(epsilon));report.join(this.cleanGraph());report.join(this.cleanAllNodes());this.nodeArrayDidChange();this.edgeArrayDidChange();this.generateJunctionsAndSectors();this.generateFaces();return report}
cleanEdges(edges,epsilon){this.unclean=!1;var report=new PlanarClean();report.join(this.cleanDuplicateNodes(epsilon));edges.map(function(edge){return this.fragmentOneEdge(edge,epsilon)},this).forEach(function(fragReport){report.join(fragReport)},this);report.join(this.cleanDuplicateNodes(epsilon));report.join(this.cleanGraph());report.join(this.cleanAllNodes());this.nodeArrayDidChange();this.edgeArrayDidChange();this.generateJunctionsAndSectors();this.generateFaces();return report}
generateJunctionsAndSectors(){this.junctions=this.nodes.map(function(el){return new this.junctionType(el)},this).filter(function(el){return el!==undefined&&el.edges.length>1},this);this.sectors=this.junctions.map(function(el){return el.sectors},this).reduce(function(prev,curr){return prev.concat(curr)},[]).filter(function(el){return el!==undefined},this);this.junctionArrayDidChange();this.sectorArrayDidChange()}
generateFaces(){var faces=this.edges.map(function(edge){return[this.counterClockwiseCircuit(edge.nodes[0],edge.nodes[1]),this.counterClockwiseCircuit(edge.nodes[1],edge.nodes[0])]},this).reduce(function(prev,curr){return prev.concat(curr)},[]).filter(function(el){return el!=undefined},this).map(function(el){return this.faceFromCircuit(el)},this).filter(function(el){return el!=undefined},this);var uniqueFaces=[];for(var i=0;i<faces.length;i++){var found=!1;for(var j=0;j<uniqueFaces.length;j++){if(faces[i].equivalent(uniqueFaces[j])){found=!0;break}}
if(!found){uniqueFaces.push(faces[i])}}
this.faces=uniqueFaces;this.faceArrayDidChange()}
newPlanarNode(x,y){this.unclean=!0;return(this.newNode()).setPosition(x,y)}
newPlanarEdge(x1,y1,x2,y2){this.unclean=!0;var a=(this.newNode()).setPosition(x1,y1);var b=(this.newNode()).setPosition(x2,y2);return this.newEdge(a,b)}
newPlanarEdgeFromNode(node,x,y){this.unclean=!0;var newNode=(this.newNode()).setPosition(x,y);return this.newEdge(node,newNode)}
newPlanarEdgeBetweenNodes(a,b){this.unclean=!0;return this.newEdge(a,b)}
clear(){this.nodes=[];this.edges=[];this.faces=[];this.sectors=[];this.junctions=[];return this}
removeEdge(edge){var len=this.edges.length;var endNodes=[edge.nodes[0],edge.nodes[1]];this.edges=this.edges.filter(function(el){return el!==edge});return new PlanarClean(0,len-this.edges.length).join(this.cleanNode(endNodes[0])).join(this.cleanNode(endNodes[1]))}
removeEdgeBetween(node1,node2){var len=this.edges.length;this.edges=this.edges.filter(function(el){return!((el.nodes[0]===node1&&el.nodes[1]===node2)||(el.nodes[0]===node2&&el.nodes[1]===node1))});this.edgeArrayDidChange();return new PlanarClean(0,len-this.edges.length).join(this.cleanNode(node1)).join(this.cleanNode(node2))}
cleanNode(node){var edges=this.edges.filter(function(e){return e.nodes[0]===node||e.nodes[1]===node},this);switch(edges.length){case 0:this.nodes=this.nodes.filter(function(el){return el!==node});this.nodeArrayDidChange();return new PlanarClean(1,0);case 2:var farNodes=[(edges[0].uncommonNodeWithEdge(edges[1])),(edges[1].uncommonNodeWithEdge(edges[0]))];if(farNodes[0]===undefined||farNodes[1]===undefined){return new PlanarClean()}
var span=new Edge(farNodes[0].x,farNodes[0].y,farNodes[1].x,farNodes[1].y);if(span.collinear(node)){edges[0].nodes=[farNodes[0],farNodes[1]];this.edges=this.edges.filter(function(el){return el!==edges[1]});this.nodes=this.nodes.filter(function(el){return el!==node});this.nodeArrayDidChange();this.edgeArrayDidChange();return new PlanarClean(1,1)}
default:return new PlanarClean()}}
cleanAllNodes(){this.nodes.forEach(function(el){el.cache.adjE=[]});this.edges.forEach(function(el){el.nodes[0].cache.adjE.push(el);el.nodes[1].cache.adjE.push(el)});var report=new PlanarClean().join(this.removeIsolatedNodes());this.nodeArrayDidChange();this.edgeArrayDidChange();for(var i=this.nodes.length-1;i>=0;i--){var edges=this.nodes[i].cache.adjE;switch(edges.length){case 0:report.join(this.removeNode(this.nodes[i]));break;case 2:var farNodes=[(edges[0].uncommonNodeWithEdge(edges[1])),(edges[1].uncommonNodeWithEdge(edges[0]))];var span=new Edge(farNodes[0].x,farNodes[0].y,farNodes[1].x,farNodes[1].y);if(span.collinear(this.nodes[i])){edges[0].nodes=[farNodes[0],farNodes[1]];this.edges.splice(edges[1].index,1);this.edgeArrayDidChange();this.nodes.splice(this.nodes[i].index,1);this.nodeArrayDidChange();report.join(new PlanarClean(1,1))}
break}}
this.nodes.forEach(function(el){el.cache.adjE=undefined});return report}
cleanDuplicateNodes(epsilon){var EPSILON_HIGH$$1=0.00000001;if(epsilon==undefined){epsilon=EPSILON_HIGH$$1}
var tree=new rbush();tree.load(this.nodes.map(function(el){return{minX:el.x-epsilon,minY:el.y-epsilon,maxX:el.x+epsilon,maxY:el.y+epsilon,node:el}}));var remainList=[],removeList=[];var mergeList=[];this.nodes.forEach(function(node){tree.search({minX:node.x-epsilon,minY:node.y-epsilon,maxX:node.x+epsilon,maxY:node.y+epsilon}).filter(function(r){return node!==r.node},this).filter(function(r){return remainList.indexOf(r.node)==-1},this).filter(function(r){return removeList.indexOf(node)==-1},this).forEach(function(r){remainList.push(node);removeList.push(r.node);mergeList.push({'remain':node,'remove':r.node})},this)},this);return mergeList.map(function(el){return new PlanarClean(-1).join(this.mergeNodes(el.remain,el.remove)).duplicateNodes([new XY(el.remove.x,el.remove.y)])},this).reduce(function(prev,curr){return prev.join(curr)},new PlanarClean())}
nearest(a,b){var point=gimme1XY(a,b);var face=this.faceContainingPoint(point);var edgeArray=this.edges.map(function(edge){return{edge:edge,distance:edge.nearestPoint(point).distanceTo(point)}},this).sort(function(a,b){return a.distance-b.distance})[0];var edge=(edgeArray!=undefined)?edgeArray.edge:undefined;var node=(edge!==undefined)?edge.nodes.slice().sort(function(a,b){return a.distanceTo(point)-b.distanceTo(point)}).shift():undefined;if(node==undefined){var sortedNode=this.nodes.map(function(el){return{'node':el,'distance':point.distanceTo(el)}},this).sort(function(a,b){return a.distance-b.distance}).shift();node=(sortedNode!=undefined)?sortedNode.node:undefined}
var junction=(node!=undefined)?node.junction():undefined;if(junction===undefined){var sortedJunction=this.junctions.map(function(el){return{'junction':el,'distance':point.distanceTo(el.origin)}},this).sort(function(a,b){return a.distance-b.distance}).shift();junction=(sortedJunction!==undefined)?sortedJunction.junction:undefined}
var sector=(junction!==undefined)?junction.sectors.filter(function(el){return el.contains(point)},this).shift():undefined;return{'node':node,'edge':edge,'face':face,'junction':junction,'sector':sector}}
faceContainingPoint(point){for(var f=0;f<this.faces.length;f++){if(this.faces[f].contains(point)){return this.faces[f]}}}
nearestNodes(quantity,a,b){var point=gimme1XY(a,b);var sortedNodes=this.nodes.map(function(el){return{'node':el,'distance':point.distanceTo(el)}},this).sort(function(a,b){return a.distance-b.distance}).map(function(el){return el.node},this);if(quantity>sortedNodes.length){return sortedNodes}
return sortedNodes.slice(0,quantity)}
nearestEdge(edges,a,b){var point=gimme1XY(a,b);edges.map(function(edge){return{edge:edge,distance:edge.nearestPoint(point).distanceTo(point)}},this).sort(function(a,b){return a.distance-b.distance}).slice(0)}
nearestEdges(quantity,a,b){var point=gimme1XY(a,b);var sortedEdges=this.edges.map(function(edge){return{edge:edge,distance:edge.nearestPoint(point).distanceTo(point)}},this).sort(function(a,b){return a.distance-b.distance});if(quantity>sortedEdges.length){return sortedEdges}
return sortedEdges.slice(0,quantity)}
nearestEdgeWithPoints(a,b,c,d){var p=gimme2XY(a,b,c,d);if(p===undefined){return}
var nears=p.map(function(point){return this.nodes.map(function(el){return{'n':el,'d':point.distanceTo(el)}},this).sort(function(a,b){return a.d-b.d}).map(function(el){return a.n},this)},this);if(nears[0].length==0||nears[1].length==0){return}
var edge=this.getEdgeConnectingNodes(nears[0][0],nears[1][0]);if(edge!==undefined)return edge;for(var cou=3;cou<20;cou+=3){for(var i=0;i<nears[0].length;i++){for(var j=0;j<nears[1].length;j++){if(i!==j){var edge=this.getEdgeConnectingNodes(nears[0][i],nears[1][j]);if(edge!==undefined)return edge}}}}}
bounds(){if(this.nodes===undefined||this.nodes.length===0){return undefined}
var minX=Infinity,minY=Infinity,maxX=-Infinity,maxY=-Infinity;this.nodes.forEach(function(el){if(el.x>maxX){maxX=el.x}if(el.x<minX){minX=el.x}
if(el.y>maxY){maxY=el.y}if(el.y<minY){minY=el.y}});return new Rect(minX,minY,maxX-minX,maxY-minY)}
getEdgeIntersections(epsilon){var intersections=[];for(var i=0;i<this.edges.length-1;i++){for(var j=i+1;j<this.edges.length;j++){var intersection=this.edges[i].intersection(this.edges[j],epsilon);if(intersection!=undefined){var copy=!1;for(var k=0;k<intersections.length;k++){if(intersection.equivalent(intersections[k],epsilon)){copy=!0;break}}
if(!copy){intersections.push(intersection)}}}}
return intersections}
scaleToUnitHeight(){var bounds=this.bounds();var scale=1/(bounds.size.height-bounds.origin.y);this.nodes.forEach(function(n){n.x=(n.x-bounds.origin.x)*scale;n.y=(n.y-bounds.origin.y)*scale},this)}
scaleToUnitWidth(){var bounds=this.bounds();var scale=1/(bounds.size.width-bounds.origin.x);this.nodes.forEach(function(n){n.x=(n.x-bounds.origin.x)*scale;n.y=(n.y-bounds.origin.y)*scale},this)}
fragment(epsilon){var sortFunction=function(a,b){if(a.commonX(b,epsilon)){return a.y-b.y}return a.x-b.x};var EPSILON_HIGH$$1=0.000000001;if(epsilon==undefined){epsilon=EPSILON_HIGH$$1}
this.edgeArrayDidChange();var crossings=[];for(var i=0;i<this.edges.length-1;i++){for(var j=i+1;j<this.edges.length;j++){var intersection=this.edges[i].intersection(this.edges[j],epsilon);if(intersection!=undefined){crossings.push({point:intersection,edges:[this.edges[i],this.edges[j]]})}}}
for(var i=0;i<crossings.length-1;i++){for(var j=crossings.length-1;j>i;j--){if(crossings[i].point.equivalent(crossings[j].point,epsilon)){crossings[i].point=crossings[i].point.lerp(crossings[j].point,0.5);crossings[i].edges=crossings[i].edges.concat(crossings[j].edges);crossings.splice(j,1)}}}
var edgesClips=Array.apply(null,Array(this.edges.length)).map(function(el){return[]});crossings.map(function(el){return{node:(this.newNode()).setPosition(el.point.x,el.point.y),edges:el.edges}},this).forEach(function(crossing){crossing.edges.forEach(function(edge){edgesClips[edge.index].push(crossing.node)},this)},this);var rebuild=edgesClips.map(function(el,i){el.sort(sortFunction);var endpoints=this.edges[i].nodes.slice().sort(sortFunction);return{edge:this.edges[i],endpoints:endpoints,innerPoints:el}},this).filter(function(el){return el.innerPoints.length!=0},this).map(function(el){return this.rebuildEdge(el.edge,el.endpoints,el.innerPoints,epsilon)},this);this.removeIsolatedNodes();this.cleanDuplicateNodes();return new PlanarClean()}
fragmentOneEdge(oneEdge,epsilon){var sortFunction=function(a,b){if(a.commonX(b,epsilon)){return a.y-b.y}return a.x-b.x};var EPSILON_HIGH$$1=0.000000001;if(epsilon==undefined){epsilon=EPSILON_HIGH$$1}
this.edgeArrayDidChange();var crossings=this.edges.filter(function(edge){return edge!==oneEdge},this).map(function(edge){return{point:oneEdge.intersection(edge,epsilon),edges:[oneEdge,edge]}},this);for(var i=0;i<crossings.length-1;i++){for(var j=crossings.length-1;j>i;j--){if(crossings[i].point.equivalent(crossings[j].point,epsilon)){crossings[i].point=crossings[i].point.lerp(crossings[j].point,0.5);crossings[i].edges=crossings[i].edges.concat(crossings[j].edges);crossings.splice(j,1)}}}
var edgesClips=Array.apply(null,Array(this.edges.length)).map(function(el){return[]});crossings.map(function(el){return{node:this.newNode().setPosition(el.point.x,el.point.y),edges:el.edges}},this).forEach(function(crossing){crossing.edges.forEach(function(edge){edgesClips[edge.index].push(crossing.node)},this)},this);var rebuild=edgesClips.map(function(el,i){el.sort(sortFunction);var endpoints=this.edges[i].nodes.slice().sort(sortFunction);return{edge:this.edges[i],endpoints:endpoints,innerPoints:el}},this).filter(function(el){return el.innerPoints.length!=0},this).map(function(el){return this.rebuildEdge(el.edge,el.endpoints,el.innerPoints,epsilon)},this);this.removeIsolatedNodes();this.cleanDuplicateNodes();return new PlanarClean()}
fragmentCrossingEdges(edge,epsilon){var report=new PlanarClean();var intersections=this.edgeCrossingEdges(edge,epsilon);if(intersections.length==0){return report}
var edgesLength=this.edges.length;report.nodes.fragment=intersections.map(function(el){return new XY(el.point.x,el.point.y)});var newLineNodes=intersections.map(function(el){return(this.newNode()).setPosition(el.point.x,el.point.y)},this);var isolated=intersections.map(function(el,i){return this.rebuildEdge(el.edge,el.edge.nodes,[newLineNodes[i]],epsilon)},this).map(function(el){return el.nodes}).reduce(function(prev,curr){return prev.concat(curr)},[]);var sortedEndpts=edge.nodes.slice().sort(function(a,b){if(a.commonX(b,epsilon)){return a.y-b.y}return a.x-b.x});isolated=isolated.concat(this.rebuildEdge(edge,sortedEndpts,newLineNodes,epsilon).nodes);report.edges.total+=edgesLength-this.edges.length;return report}
edgeCrossingEdges(edge,epsilon){var EPSILON_HIGH$$1=0.000000001;if(epsilon==undefined){epsilon=EPSILON_HIGH$$1}
var myXs=edge.nodes.map(function(n){return n.x}).sort(function(a,b){return a-b});var myYs=edge.nodes.map(function(n){return n.y}).sort(function(a,b){return a-b});myXs[0]-=epsilon;myXs[1]+=epsilon;myYs[0]-=epsilon;myYs[1]+=epsilon;return this.edges.filter(function(el){return!((el.nodes[0].x<myXs[0]&&el.nodes[1].x<myXs[0])||(el.nodes[0].x>myXs[1]&&el.nodes[1].x>myXs[1])||(el.nodes[0].y<myYs[0]&&el.nodes[1].y<myYs[0])||(el.nodes[0].y>myYs[1]&&el.nodes[1].y>myYs[1]))},this).filter(function(el){return edge!==el},this).map(function(el){return{edge:el,point:edge.intersection(el,epsilon)}},this).filter(function(el){return el.point!=undefined}).sort(function(a,b){if(a.point.commonX(b.point,epsilon)){return a.point.y-b.point.y}
return a.point.x-b.point.x})}
rebuildEdge(oldEdge,oldEndpts,innerpoints,epsilon){var isolatedNodes=[];var endinnerpts=[innerpoints[0],innerpoints[innerpoints.length-1]];var equiv=oldEndpts.map(function(n,i){return n.equivalent(endinnerpts[i],epsilon)},this);if(equiv[0]){isolatedNodes.push(oldEndpts[0])}else{innerpoints.unshift(oldEndpts[0])}
if(equiv[1]){isolatedNodes.push(oldEndpts[1])}else{innerpoints.push(oldEndpts[1])}
var newEdges=[];if(innerpoints.length>1){for(var i=0;i<innerpoints.length-1;i++){var e=this.copyEdge(oldEdge);e.nodes=[innerpoints[i],innerpoints[i+1]];newEdges.push(e)}}
this.edges=this.edges.filter(function(e){return e!==oldEdge},this);return{edges:newEdges,nodes:isolatedNodes}}
fragmentCollinearNodes(epsilon){var EPSILON_HIGH$$1=0.000000001;if(epsilon==undefined){epsilon=EPSILON_HIGH$$1}
var tree=new rbush();var treeNodes=this.nodes.map(function(n){return{minX:n.x-epsilon,minY:n.y-epsilon,maxX:n.x+epsilon,maxY:n.y+epsilon,node:n}},this);tree.load(treeNodes);this.edges.forEach(function(edge){edge.cache.box=edge.boundingBox(epsilon)},this);this.edges.slice().forEach(function(edge){var box=edge.cache.box;if(box==undefined){box=edge.boundingBox(epsilon)}
var result=tree.search({minX:box.origin.x,minY:box.origin.y,maxX:box.origin.x+box.size.width,maxY:box.origin.y+box.size.height}).filter(function(found){return!edge.nodes[0].equivalent(found.node,epsilon)&&!edge.nodes[1].equivalent(found.node,epsilon)}).filter(function(found){return edge.collinear(found.node,epsilon)});if(result.length){var sortedEdgePts=edge.nodes.slice().sort(function(a,b){if(a.commonX(b,epsilon)){return a.y-b.y}
return a.x-b.x});var sortedResult=result.map(function(found){return found.node},this).sort(function(a,b){if(a.commonX(b,epsilon)){return a.y-b.y}
return a.x-b.x});this.rebuildEdge(edge,sortedEdgePts,sortedResult,epsilon).edges.forEach(function(e){e.cache.box=e.boundingBox(epsilon)})}},this)}
counterClockwiseCircuit(node1,node2){if(node1===undefined||node2===undefined){return undefined}
var incidentEdge=node1.graph.getEdgeConnectingNodes(node1,node2);if(incidentEdge==undefined){return undefined}
var pairs=[];var lastNode=node1;var travelingNode=node2;var visitedList=[lastNode];var nextWalk=incidentEdge;pairs.push(nextWalk);do{visitedList.push(travelingNode);var travelingNodeJunction=travelingNode.junction();if(travelingNodeJunction!==undefined){nextWalk=travelingNodeJunction.clockwiseEdge(nextWalk)}
pairs.push(nextWalk);lastNode=travelingNode;travelingNode=nextWalk.otherNode(lastNode);if(travelingNode===node1){return pairs}}while(!(visitedList.filter(function(el){return el===travelingNode}).length>0));return undefined}
faceFromCircuit(circuit){var SUM_ANGLE_EPSILON=0.000000000001;if(circuit==undefined||circuit.length<3){return undefined}
var face=new this.faceType(this);face.edges=circuit;face.nodes=circuit.map(function(el,i){var nextEl=circuit[(i+1)%circuit.length];return el.uncommonNodeWithEdge(nextEl)});var angleSum=face.nodes.map(function(el,i){var el1=face.nodes[(i+1)%face.nodes.length];var el2=face.nodes[(i+2)%face.nodes.length];return clockwiseInteriorAngle(new XY(el.x-el1.x,el.y-el1.y),new XY(el2.x-el1.x,el2.y-el1.y))},this).reduce(function(sum,value){return sum+value},0);if(face.nodes.length>2&&Math.abs(angleSum/(face.nodes.length-2)-Math.PI)<SUM_ANGLE_EPSILON){return face}}
copy(){this.nodeArrayDidChange();this.edgeArrayDidChange();this.faceArrayDidChange();this.sectorArrayDidChange();this.junctionArrayDidChange();var g=new PlanarGraph();for(var i=0;i<this.nodes.length;i++){var n=g.addNode(new PlanarNode(g));Object.assign(n,this.nodes[i]);n.graph=g;n.index=i}
for(var i=0;i<this.edges.length;i++){var index=[this.edges[i].nodes[0].index,this.edges[i].nodes[1].index];var e=g.addEdge(new PlanarEdge(g,g.nodes[index[0]],g.nodes[index[1]]));Object.assign(e,this.edges[i]);e.graph=g;e.index=i;e.nodes=[g.nodes[index[0]],g.nodes[index[1]]]}
for(var i=0;i<this.faces.length;i++){var f=new PlanarFace(g);Object.assign(f,this.faces[i]);for(var j=0;j<this.faces[i].nodes.length;j++){f.nodes.push(f.nodes[this.faces[i].nodes[j].index])}
for(var j=0;j<this.faces[i].edges.length;j++){f.edges.push(f.edges[this.faces[i].edges[j].index])}
f.graph=g;f.index=i;g.faces.push(f)}
g.sectors=this.sectors.map(function(sector,i){var gSecEdges=sector.edges.map(function(edge){return g.edges[edge.index]},this);var s=new PlanarSector(gSecEdges[0],gSecEdges[1]);s.index=i;return s},this);g.junctions=this.junctions.map(function(junction,i){var j=new PlanarJunction(undefined);j.origin=g.nodes[junction.origin.index];j.sectors=junction.sectors.map(function(sector){return g.sectors[sector.index]},this);j.edges=junction.edges.map(function(edge){return g.edges[edge.index]},this);j.index=i;return j},this);return g}
polylines(){return this.connectedGraphs().map(function(graph){if(graph.edges.length==0){return undefined}
if(graph.edges.length==1){return graph.edges[0].nodes.map(function(n){return n.copy()},this)}
var nodes=[graph.edges[0].uncommonNodeWithEdge(graph.edges[1])];for(var i=0;i<graph.edges.length-1;i++){var edge=graph.edges[i];var nextEdge=graph.edges[(i+1)];nodes.push(edge.commonNodeWithEdge(nextEdge))}
nodes.push(graph.edges[graph.edges.length-1].uncommonNodeWithEdge(graph.edges[graph.edges.length-2]));return nodes.map(function(el){return el.copy()},this)},this).filter(function(el){return el!=undefined},this).map(function(line){var p=new Polyline();p.nodes=line;return p},this)}
faceArrayDidChange(){for(var i=0;i<this.faces.length;i++){this.faces[i].index=i}}
sectorArrayDidChange(){for(var i=0;i<this.sectors.length;i++){this.sectors[i].index=i}}
junctionArrayDidChange(){for(var i=0;i<this.junctions.length;i++){this.junctions[i].index=i}}}
function isValidNumber$2(n){return(n!==undefined&&!isNaN(n)&&!isNaN(n))}
class ComplexNumber
{constructor(a,b)
{this.TOLERANCE=1.E-10;if(a instanceof ComplexNumber)
{this.x=a.x;this.y=a.y;this.r=a.r;this.phi=a.phi}
else{this.x=isValidNumber$2(a)&&Math.abs(a)>this.TOLERANCE?a:0;this.y=isValidNumber$2(b)&&Math.abs(b)>this.TOLERANCE?b:0;this.r=Math.sqrt(this.x*this.x+this.y*this.y);if(this.r==0)this.phi=0;else if(this.y>=0)this.phi=Math.acos(this.x/this.r);else if(this.y<0)this.phi=Math.acos(-1*this.x/this.r)+Math.PI}}
fromRandPhi(r,phi)
{var c=new ComplexNumber();c.r=r;c.phi=phi;c.x=r*Math.cos(phi);c.y=r*Math.sin(phi);if(Math.abs(c.x)<this.TOLERANCE)c.x=0;if(Math.abs(c.y)<this.TOLERANCE)c.y=0;return c}
add(a,b)
{var that=new ComplexNumber(a,b);return new ComplexNumber(this.x+that.x,this.y+that.y)}
subtract(a,b)
{var that=new ComplexNumber(a,b);return new ComplexNumber(this.x-that.x,this.y-that.y)}
multiply(a,b)
{var that=new ComplexNumber(a,b);return new ComplexNumber(this.x*that.x-this.y*that.y,this.y*that.x+this.x*that.y)}
divide(a,b)
{var that=new ComplexNumber(a,b);var r=that.x*that.x+that.y*that.y;return new ComplexNumber((this.x*that.x+this.y*that.y)/r,(this.y*that.x-this.x*that.y)/r)}
sqrt(rank)
{if(!isValidNumber$2(rank))rank=0;if(this.r==0)return new ComplexNumber();return new ComplexNumber().fromRandPhi(Math.sqrt(this.r),(this.phi+2*Math.PI*rank)/2)}
cubrt(rank)
{if(!isValidNumber$2(rank))rank=0;if(this.r==0)return new ComplexNumber();return new ComplexNumber().fromRandPhi(Math.pow(this.r,1/3),(this.phi+2*Math.PI*rank)/3)}
square(){return this.multiply(this)}
cube(){return this.square().multiply(this)}
equals(a,b)
{var that=new ComplexNumber(a,b);return this.x==that.x&&this.y==that.y}
isZero(){return this.x==0&&this.y==0}
isReal(){return this.y==0}
isImaginary(){return this.x==0&&this.y!=0}}
class Polynomial
{order(){}
parameters(){}
roots(){}
realRoots()
{return this.roots().filter(function(root){return root.y==0}).map(function(root){return root.x})}}
class LinearEquation extends Polynomial
{constructor(a,b)
{super();this.a=a instanceof ComplexNumber?a:new ComplexNumber(a);this.b=b instanceof ComplexNumber?b:new ComplexNumber(b)}
order(){return 1}
parameters(){return[this.a,this.b]}
roots()
{if(!this.a.isZero()){return[this.b.multiply(-1).divide(this.a)]}
return[]}}
class QuadraticEquation extends Polynomial
{constructor(a,b,c)
{super();this.a=a instanceof ComplexNumber?a:new ComplexNumber(a);this.b=b instanceof ComplexNumber?b:new ComplexNumber(b);this.c=c instanceof ComplexNumber?c:new ComplexNumber(c)}
order(){return 2}
parameters(){return[this.a,this.b,this.c]}
roots()
{if(!this.a.isZero())
{var bOver2A=this.b.divide(this.a.multiply(2));var cOverA=this.c.divide(this.a);var delta=bOver2A.square().subtract(cOverA);var root1=delta.sqrt().subtract(bOver2A);var root2=delta.sqrt(1).subtract(bOver2A);var roots=[root1];if(!root1.equals(root2))roots.push(root2);return roots}
else return new LinearEquation(this.b,this.c).roots()}}
class DepressedCubicEquation extends Polynomial
{constructor(m,n)
{super();this.m=m instanceof ComplexNumber?m:new ComplexNumber(m);this.n=n instanceof ComplexNumber?n:new ComplexNumber(n)}
order(){return 3}
parameters(){return[new ComplexNumber(1),new ComplexNumber(),this.m,this.n]}
roots()
{var t1=this.m.divide(3).cube();var t2=this.n.divide(2).square().add(t1);var delta=t2.sqrt().subtract(this.n.divide(2));if(delta.isZero())delta=t2.sqrt(1).subtract(this.n.divide(2));var delta0=delta.cubrt();var root1=delta0.subtract(this.m.divide(delta0.multiply(3)));var delta1=delta.cubrt(1);var root2=delta1.subtract(this.m.divide(delta1.multiply(3)));var delta2=delta.cubrt(2);var root3=delta2.subtract(this.m.divide(delta2.multiply(3)));var roots=[root1];if(!root1.equals(root2))roots.push(root2);if(!root1.equals(root3)&&!root2.equals(root3))roots.push(root3);return roots}}
class CubicEquation extends Polynomial
{constructor(a,b,c,d)
{super();this.a=a instanceof ComplexNumber?a:new ComplexNumber(a);this.b=b instanceof ComplexNumber?b:new ComplexNumber(b);this.c=c instanceof ComplexNumber?c:new ComplexNumber(c);this.d=d instanceof ComplexNumber?d:new ComplexNumber(d)}
order(){return 3}
parameters(){return[this.a,this.b,this.c,this.d]}
roots()
{if(!this.a.isZero())
{var b1=this.b.divide(this.a);var c1=this.c.divide(this.a);var d1=this.d.divide(this.a);var m=c1.subtract(b1.square().divide(3));var n=d1.subtract(b1.multiply(c1).divide(3)).add(b1.cube().multiply(2/27));return new DepressedCubicEquation(m,n).roots().map(function(root){return root.subtract(b1.divide(3))})}
else return new QuadraticEquation(this.b,this.c,this.d).roots()}}
function SVGLoader(_){var args=[];for(var i=0;i<arguments.length;i++){args.push(arguments[i])}
var rootElement=args.filter(function(arg){return arg instanceof HTMLElement||arg instanceof Document},this).shift();if(rootElement==undefined){var string=args.filter(function(a){return typeof a==='string'||a instanceof String},this).shift();if(string!=undefined){rootElement=(new window.DOMParser()).parseFromString(string,"text/xml")}}
if(rootElement==undefined){throw "error, the svg parser was given some unrecognizable data."}
var cssStyle,styleTag=rootElement.getElementsByTagName('style')[0];if(styleTag!=undefined&&styleTag.childNodes!=undefined&&styleTag.childNodes.length>0){cssStyle=parseCSSText(styleTag.childNodes[0].nodeValue)}
var allSVGs=rootElement.getElementsByTagName('svg');if(allSVGs==undefined||allSVGs.length==0){throw "error, the svg parser couldn't find an SVG element"}
var svg=allSVGs[0];var properties=['x','y','width','height'];var values=properties.map(function(prop){return svg.attributes[prop]==undefined?"":svg.attributes[prop].nodeValue},this).map(function(string){return parseFloat(string)},this);var viewBoxString=svg.attributes.viewBox==undefined?"":svg.attributes.viewBox.nodeValue;var viewBoxValues=viewBoxString.split(' ').map(function(el){return parseFloat(el)},this);var bounds={'origin':{'x':values[0],'y':values[1]},'size':{'width':values[2],'height':values[3]}};if(isNaN(bounds.size.width)){bounds.size.width=viewBoxValues[2]}
if(isNaN(bounds.size.height)){bounds.size.height=viewBoxValues[3]}
var creases={'mountain':[],'valley':[],'mark':[]};depthFirstGetLines(svg.children,creases,cssStyle);var cp=new CreasePattern();cp.nodes=[];cp.edges=[];creases.mark.forEach(function(p){cp.newCrease(p[0],p[1],p[2],p[3]).mark()},this);creases.valley.forEach(function(p){cp.newCrease(p[0],p[1],p[2],p[3]).valley()},this);creases.mountain.forEach(function(p){cp.newCrease(p[0],p[1],p[2],p[3]).mountain()},this);cp.edges.forEach(function(edge){if(cp.boundary.edges.filter(function(b){return b.parallel(edge)},this).filter(function(b){return b.collinear(edge.nodes[0])},this).length>0){edge.boundary()}},this);cp.scaleToUnitHeight();var points=cp.nodes.map(function(p){return{x:p.x,y:p.y}},this);cp.boundary.convexHull(points);cp.clean();return cp}
function parseCSSText(styleContent){var styleElement=document.createElement("style");styleElement.textContent=styleContent;document.body.appendChild(styleElement);var rules=styleElement.sheet.cssRules;document.body.removeChild(styleElement);return rules}
function parseColor(input){if(input.substr(0,1)=="#"){var collen=(input.length-1)/3;var fact=[17,1,0.062272][collen-1];return[Math.round(parseInt(input.substr(1,collen),16)*fact),Math.round(parseInt(input.substr(1+collen,collen),16)*fact),Math.round(parseInt(input.substr(1+2*collen,collen),16)*fact)]}
else return input.split("(")[1].split(")")[0].split(",").map(Math.round)}
function detectCrease(node,cssStyle){var strokeText=undefined;if(node.attributes.stroke!=undefined){strokeText=node.attributes.stroke.nodeValue}
else if(node.attributes.class!=undefined&&cssStyle!=undefined){var found=undefined;for(var i=0;i<cssStyle.length;i++){if(cssStyle[i].selectorText=='.'+node.attributes.class.nodeValue){found=cssStyle[i].style}}
if(found!=undefined){strokeText=found.stroke}}
if(strokeText!=undefined){var colors=parseColor(strokeText);if(Math.abs(colors[2]-colors[1])<10&&Math.abs(colors[1]-colors[0])<10){return'mark'}
else if(colors[0]>colors[2]){return'mountain'}
else if(colors[2]>colors[0]){return'valley'}}
return'mark'}
function depthFirstGetLines(children,creases,cssStyle){var childrenArray=[];for(var i=0;i<children.length;i++){childrenArray.push(children[i])}
childrenArray.forEach(function(node){switch(node.nodeName){case '#text':break;case 'line':var vals=['x1','y1','x2','y2'].map(function(el){return parseFloat(node.attributes[el].nodeValue)},this);creases[detectCrease(node,cssStyle)].push([vals[0],vals[1],vals[2],vals[3]]);break;case 'rect':var x=parseFloat(node.attributes.x.nodeValue);var y=parseFloat(node.attributes.y.nodeValue);var width=parseFloat(node.attributes.width.nodeValue);var height=parseFloat(node.attributes.height.nodeValue);var rectArray=[[x,y],[x+width,y],[x+width,y+height],[x,y+height]];var creaseType=detectCrease(node,cssStyle);rectArray.forEach(function(el,i){var nextEl=rectArray[(i+1)%rectArray.length];creases[creaseType].push([el[0],el[1],nextEl[0],nextEl[1]])},this);break;case 'path':var P_RESOLUTION=64;var pathLength=node.getTotalLength();var closed=node.attributes.d.nodeValue.lastIndexOf('z')!=-1||node.attributes.d.nodeValue.lastIndexOf('Z')!=-1?!0:!1;var pathPoints=[];for(var i=0;i<P_RESOLUTION;i++){pathPoints.push(node.getPointAtLength(i*pathLength/P_RESOLUTION))}
var creaseType=detectCrease(node,cssStyle);pathPoints.forEach(function(point,i){if(i==pathPoints.length-1&&!closed){return}
var nextPoint=pathPoints[(i+1)%pathPoints.length];creases[creaseType].push([point.x,point.y,nextPoint.x,nextPoint.y])},this);break;case 'circle':var C_RESOLUTION=64;var x=parseFloat(node.attributes.cx.nodeValue);var y=parseFloat(node.attributes.cy.nodeValue);var r=parseFloat(node.attributes.r.nodeValue);var circlePts=[];var creaseType=detectCrease(node,cssStyle);for(var i=0;i<C_RESOLUTION;i++){circlePts.push([x+r*Math.cos(i*2*Math.PI/C_RESOLUTION),y+r*Math.sin(i*2*Math.PI/C_RESOLUTION)])}
circlePts.forEach(function(point,i){var nextPoint=circlePts[(i+1)%circlePts.length];creases[creaseType].push([point[0],point[1],nextPoint[0],nextPoint[1]])},this);break;case 'polygon':case 'polyline':var closed=(node.nodeName=='polygon')?!0:!1;var points=node.attributes.points.nodeValue.split(' ').filter(function(el){return el!=""},this).map(function(el){return el.split(',').map(function(coord){return parseFloat(coord)},this)},this);var creaseType=detectCrease(node,cssStyle);points.forEach(function(point,i){if(i==points.length-1&&!closed){return}
var nextPoint=points[(i+1)%points.length];creases[creaseType].push([point[0],point[1],nextPoint[0],nextPoint[1]])},this);break;default:if(node.childNodes!==undefined&&node.childNodes.length>0){depthFirstGetLines(node.childNodes,creases,cssStyle)}
break}},this)}
function isValidPoint$2(point){return(point!==undefined&&!isNaN(point.x)&&!isNaN(point.y))}
function isValidNumber$3(n){return(n!==undefined&&!isNaN(n)&&!isNaN(n))}
function cleanNumber$1(num,decimalPlaces){if(Math.floor(num)==num||decimalPlaces==undefined){return num}
return parseFloat(num.toFixed(decimalPlaces))}
function gimme1XY$1(a,b){if(isValidPoint$2(a)){return new XY(a.x,a.y)}
if(isValidNumber$3(b)){return new XY(a,b)}
if(a.constructor===Array){return new XY(a[0],a[1])}}
function gimme2XY$1(a,b,c,d){if(a instanceof XY&&b instanceof XY){return[a,b]}
if(isValidPoint$2(b)){return[new XY(a.x,a.y),new XY(b.x,b.y)]}
if(isValidNumber$3(d)){return[new XY(a,b),new XY(c,d)]}}
function gimme1Edge$1(a,b,c,d){if(a instanceof Edge){return a}
if(a.nodes!==undefined){return new Edge(a.nodes[0],a.nodes[1])}
if(isValidPoint$2(b)){return new Edge(a,b)}
if(isValidNumber$3(d)){return new Edge(a,b,c,d)}}
function gimme1Ray$1(a,b,c,d){if(a instanceof Ray){return a}
if(isValidPoint$2(b)){return new Ray(a,b)}
if(isValidNumber$3(d)){return new Ray(new XY(a,b),new XY(c,d))}}
function gimme1Line$1(a,b,c,d){if(a instanceof Line){return a}
if(isValidPoint$2(b)){return new Line(a,b)}
if(isValidNumber$3(d)){return new Line(a,b,c,d)}
if(a instanceof Edge&&a.nodes instanceof Array&&a.nodes.length>0&&isValidPoint$2(a.nodes[1])){return new Line(a.nodes[0].x,a.nodes[0].y,a.nodes[1].x,a.nodes[1].y)}}
class CPPoint extends XY{constructor(cp,point){super(point.x,point.y);this.cp=cp}
nearest(){return this.cp.nearest(this)}}
class CPLine extends Line{constructor(cp,line){super(line.point,line.direction);this.cp=cp}
crease(){return this.cp.crease(this)}}
class CPRay extends Ray{constructor(cp,ray){super(ray.origin,ray.direction);this.cp=cp}
crease(){return this.cp.crease(this)}
creaseAndRepeat(){return this.cp.creaseRayRepeat(this)}
creaseAndStop(){return this.cp.creaseAndStop(this)}}
class CPEdge extends Edge{constructor(cp,edge){super(edge.nodes[0],edge.nodes[1]);this.cp=cp}
crease(){return this.cp.crease(this)}}
const CreaseDirection=Object.freeze({mark:"mark",boundary:"boundary",mountain:"mountain",valley:"valley",});class Fold{constructor(foldFunction,argumentArray){this.func=foldFunction;this.args=argumentArray}}
class MadeBy{constructor(){this.endPoints=[];this.intersections=[]}}
class CreaseSector extends PlanarSector{bisect(){var vectors=this.vectors();var angles=vectors.map(function(el){return Math.atan2(el.y,el.x)});while(angles[0]<0){angles[0]+=Math.PI*2}
while(angles[1]<0){angles[1]+=Math.PI*2}
var interior=counterClockwiseInteriorAngleRadians(angles[0],angles[1]);var bisected=angles[0]+interior*0.5;var ray=new Ray(new XY(this.origin.x,this.origin.y),new XY(Math.cos(bisected),Math.sin(bisected)));return new CPRay(this.origin.graph,ray)}
kawasakiCollapse(){var junction=this.origin.junction();if(junction.edges.length%2==0){return}
var foundIndex=undefined;for(var i=0;i<junction.sectors.length;i++){if(this.equivalent(junction.sectors[i])){foundIndex=i}}
if(foundIndex==undefined){return}
var sumEven=0;var sumOdd=0;for(var i=0;i<junction.sectors.length-1;i++){var index=(i+foundIndex+1)%junction.sectors.length;if(i%2==0){sumEven+=junction.sectors[index].angle()}
else{sumOdd+=junction.sectors[index].angle()}}
var dEven=Math.PI-sumEven;var vec0=this.edges[0].vector(this.origin);var angle0=Math.atan2(vec0.y,vec0.x);var newA=angle0+dEven;var solution=new Ray(new XY(this.origin.x,this.origin.y),new XY(Math.cos(newA),Math.sin(newA)));if(this.contains(solution.origin.add(solution.direction))){return new CPRay(this.origin.graph,solution)}}}
class CreaseJunction extends PlanarJunction{flatFoldable(epsilon){return this.kawasaki(epsilon)&&this.maekawa()}
alternateAngleSum(){if(this.sectors.length%2!=0){return undefined}
var sums=[0,0];this.sectors.forEach(function(el,i){sums[i%2]+=el.angle()});return sums}
maekawa(){if(this.origin.isBoundary()){return!0}
var m=this.edges.filter(function(edge){return edge.orientation===CreaseDirection.mountain},this).length;var v=this.edges.filter(function(edge){return edge.orientation===CreaseDirection.valley},this).length;return Math.abs(m-v)==2}
kawasaki(epsilon){if(epsilon===undefined){epsilon=0.0001}
if(this.origin.isBoundary()){return!0}
var alternating=this.alternateAngleSum();if(alternating==undefined){return!1}
return Math.abs(alternating[0]-alternating[1])<epsilon}
kawasakiRating(){var alternating=this.alternateAngleSum();return Math.abs(alternating[0]-alternating[1])}
kawasakiSolution(){var alternating=this.alternateAngleSum().map(function(el){return{'difference':(Math.PI-el),'sectors':[]}});this.sectors.forEach(function(el,i){alternating[i%2].sectors.push(el)});return alternating}
kawasakiCollapse(sector){if(this.edges.length%2==0){return}
var foundIndex=undefined;if(sector!=undefined){for(var i=0;i<this.sectors.length;i++){if(sector.equivalent(this.sectors[i])){foundIndex=i}}}
if(foundIndex==undefined){for(var i=0;i<this.sectors.length;i++){var ray=this.sectors[i].kawasakiCollapse();if(ray!=undefined){return ray}}
return}
var sumEven=0;var sumOdd=0;for(var i=0;i<this.sectors.length-1;i++){var index=(i+foundIndex+1)%this.sectors.length;if(i%2==0){sumEven+=this.sectors[index].angle()}
else{sumOdd+=this.sectors[index].angle()}}
var dEven=Math.PI-sumEven;var vec0=sector.edges[0].vector(sector.origin);var angle0=Math.atan2(vec0.y,vec0.x);var newA=angle0-dEven;var solution=new Ray(new XY(this.origin.x,this.origin.y),new XY(Math.cos(newA),Math.sin(newA)));if(sector.contains(solution.origin.add(solution.direction))){return new CPRay(this.origin.graph,solution)}}}
class CreaseNode extends PlanarNode{isBoundary(){return this.graph.boundary.liesOnEdge(this)}
alternateAngleSum(){return(this.junction()).alternateAngleSum()}
kawasakiRating(){return(this.junction()).kawasakiRating()}
flatFoldable(epsilon){if(this.isBoundary()){return!0}
return(this.junction()).flatFoldable(epsilon)}
kawasakiCollapse(a,b){var junction=this.junction();var sector=junction.sectorWithEdges(a,b);if(sector!==undefined){return junction.kawasakiCollapse(sector)}}}
class Crease extends PlanarEdge{constructor(graph,node1,node2){super(graph,node1,node2);this.orientation=CreaseDirection.mark;this.newMadeBy=new MadeBy();this.newMadeBy.endPoints=[node1,node2]};mark(){this.orientation=CreaseDirection.mark;return this}
mountain(){this.orientation=CreaseDirection.mountain;return this}
valley(){this.orientation=CreaseDirection.valley;return this}
boundary(){this.orientation=CreaseDirection.boundary;return this}
creaseToEdge(edge){return this.graph.creaseEdgeToEdge(this,edge)}}
class NoCrease extends Crease{constructor(){super(undefined,undefined,undefined);this.orientation=CreaseDirection.mark;this.newMadeBy=new MadeBy()};mark(){return this}
mountain(){return this}
valley(){return this}
boundary(){return this}}
class CreaseFace extends PlanarFace{constructor(graph){super(graph);this.cache={}}
rabbitEar(){var sectors=this.sectors();if(sectors.length!==3){return[]}
var rays=sectors.map(function(el){return el.bisect()});var incenter=rays.map(function(el,i){var nextEl=rays[(i+1)%rays.length];return el.intersection(nextEl)}).reduce(function(prev,current){return prev.add(current)}).scale(1.0/rays.length);var incenterNode=(this.graph).newPlanarNode(incenter.x,incenter.y);return this.nodes.map(function(el){return(this.graph).newCreaseBetweenNodes(el,incenterNode)},this)}}
class CreasePattern extends PlanarGraph{constructor(){super();this.nodeType=CreaseNode;this.edgeType=Crease;this.faceType=CreaseFace;this.sectorType=CreaseSector;this.junctionType=CreaseJunction;this.CreaseDirection=CreaseDirection;this.symmetryLine=undefined;this.boundary=new ConvexPolygon();this.square()}
clear(){this.nodes=[];this.edges=[];this.faces=[];this.sectors=[];this.junctions=[];this.symmetryLine=undefined;this.cleanBoundary();this.clean();return this}
cleanBoundary(){this.edges=this.edges.filter(function(el){return el.orientation!==CreaseDirection.boundary});this.cleanAllNodes();var boundaryNodes=this.boundary.nodes().map(function(node){return this.newPlanarNode(node.x,node.y)},this);boundaryNodes.forEach(function(node,i){var nextNode=boundaryNodes[(i+1)%boundaryNodes.length];(this.newPlanarEdgeBetweenNodes(node,nextNode)).boundary()},this);this.cleanDuplicateNodes()}
contains(a,b){var p=gimme1XY$1(a,b);if(p==undefined){return!1}
return this.boundary.contains(p)}
square(width){if(width==undefined){width=1.0}
else if(width<0){width=Math.abs(width)}
return this.setBoundary([[0,0],[width,0],[width,width],[0,width]],!0)}
rectangle(width,height){if(width==undefined||height==undefined){return this}
width=Math.abs(width);height=Math.abs(height);return this.setBoundary([[0,0],[width,0],[width,height],[0,height]],!0)}
polygon(sides){if(sides<3){return this}
return this.setBoundary(new ConvexPolygon().regularPolygon(sides).nodes())}
noBoundary(){this.boundary.edges=[];this.cleanBoundary();this.clean();return this}
setBoundary(pointArray,pointsSorted){var points=pointArray.map(function(p){return gimme1XY$1(p)},this);if(points[0].equivalent(points[points.length-1])){points.pop()}
if(pointsSorted===!0){this.boundary.setEdgesFromPoints(points)}
else{this.boundary.convexHull(points)}
this.cleanBoundary();this.clean();return this}
setMinimumRectBoundary(){var bounds=this.bounds();return this.setBoundary([[bounds.origin.x,bounds.origin.y],[bounds.origin.x+bounds.size.width,bounds.origin.y],[bounds.origin.x+bounds.size.width,bounds.origin.y+bounds.size.height],[bounds.origin.x,bounds.origin.y+bounds.size.height]])}
noSymmetry(){this.symmetryLine=undefined;return this}
bookSymmetry(){var center=this.boundary.center();this.symmetryLine=new Line(center,new XY(0,1));return this}
diagonalSymmetry(){var center=this.boundary.center();this.symmetryLine=new Line(center,new XY(0.7071,0.7071));return this}
setSymmetryLine(a,b,c,d){var edge=gimme1Edge$1(a,b,c,d);this.symmetryLine=new Line(edge.nodes[0],edge.nodes[1].subtract(edge.nodes[1]));return this}
kawasakiCollapse(a,b,c,d){if(isValidPoint$2(a)){var j=this.nearest(a,b).junction;if(j==undefined){return new NoCrease()}
var k=j.kawasakiCollapse();return k!=undefined?k.crease():new NoCrease()}
if(isValidNumber$3(a)&&isValidNumber$3(b)){var j=this.nearest(a,b).junction;if(j==undefined){return new NoCrease()}
var k=j.kawasakiCollapse();return k!=undefined?k.crease():new NoCrease()}}
point(a,b){return new CPPoint(this,gimme1XY$1(a,b))}
line(a,b,c,d){return new CPLine(this,gimme1Line$1(a,b,c,d))}
ray(a,b,c,d){return new CPRay(this,gimme1Ray$1(a,b,c,d))}
edge(a,b,c,d){return new CPEdge(this,gimme1Edge$1(a,b,c,d))}
axiom1(a,b,c,d){var points=gimme2XY$1(a,b,c,d);if(points===undefined){return undefined}
return new CPLine(this,new Line(points[0],points[1].subtract(points[0])))}
axiom2(a,b,c,d){var points=gimme2XY$1(a,b,c,d);return new CPLine(this,new Line(points[1].midpoint(points[0]),points[1].subtract(points[0]).rotate90()))}
axiom3(one,two){return new Edge(one).infiniteLine().bisect(new Edge(two).infiniteLine()).map(function(line){return new CPLine(this,line)},this)}
axiom4(line,point){return new CPLine(this,new Line(point,new Edge(line).vector().rotate90()))}
axiom5(origin,point,line){var radius=Math.sqrt(Math.pow(origin.x-point.x,2)+Math.pow(origin.y-point.y,2));var intersections=new Circle(origin,radius).intersection(new Edge(line).infiniteLine());var lines=[];for(var i=0;i<intersections.length;i++){lines.push(this.axiom2(point,intersections[i]))}
return lines}
axiom6(point1,point2,line1,line2){var p1=point1.x;var q1=point1.y;if(line1.nodes[1].x-line1.nodes[0].x!=0){var m1=(line1.nodes[1].y-line1.nodes[0].y)/((line1.nodes[1].x-line1.nodes[0].x));var h1=line1.nodes[0].y-m1*line1.nodes[0].x}
else{var k1=line1.nodes[0].x}
var p2=point2.x;var q2=point2.y;if(line2.nodes[1].x-line2.nodes[0].x!=0){var m2=(line2.nodes[1].y-line2.nodes[0].y)/(line2.nodes[1].x-line2.nodes[0].x);var h2=line2.nodes[0].y-m2*line2.nodes[0].x}
else{var k2=line2.nodes[0].x}
if(m1!==undefined&&m2!==undefined){var a1=m1*m1+1;var b1=2*m1*h1;var c1=h1*h1-p1*p1-q1*q1;var a2=m2*m2+1;var b2=2*m2*h2;var c2=h2*h2-p2*p2-q2*q2;var a0=m2*p1+(h1-q1);var b0=p1*(h2-q2)-p2*(h1-q1);var c0=m2-m1;var d0=m1*p2+(h2-q2);var z=m1*p1+(h1-q1)}
else if(m1===undefined&&m2===undefined){a1=1;b1=0;c1=k1*k1-p1*p1-q1*q1;a2=1;b2=0;c2=k2*k2-p2*p2-q2*q2;a0=k1-p1;b0=q1*(k2-p2)-q2*(k1-p1);c0=0;d0=k2-p2;z=a0}
else{if(m1===undefined){var p3=p1;p1=p2;p2=p3;var q3=q1;q1=q2;q2=q3;m1=m2;m2=undefined;h1=h2;h2=undefined;k2=k1;k1=undefined}
a1=m1*m1+1;b1=2*m1*h1;c1=h1*h1-p1*p1-q1*q1;a2=1;b2=0;c2=k2*k2-p2*p2-q2*q2;a0=p1;b0=(h1-q1)*(k2-p2)-p1*q2;c0=1;d0=-m1*(k2-p2)-q2;z=m1*p1+(h1-q1)}
var a3=a1*a0*a0+b1*a0*c0+c1*c0*c0;var b3=2*a1*a0*b0+b1*(a0*d0+b0*c0)+2*c1*c0*d0;var c3=a1*b0*b0+b1*b0*d0+c1*d0*d0;var a4=a2*c0*z;var b4=(a2*d0+b2*c0)*z-a3;var c4=(b2*d0+c2*c0)*z-b3;var d4=c2*d0*z-c3;var roots=new CubicEquation(a4,b4,c4,d4).realRoots();var lines=[];if(roots!=undefined&&roots.length>0){for(var i=0;i<roots.length;++i){if(m1!==undefined&&m2!==undefined){var u2=roots[i];var v2=m2*u2+h2}
else if(m1===undefined&&m2===undefined){v2=roots[i];u2=k2}
else{v2=roots[i];u2=k2}
if(v2!=q2){var mF=-1*(u2-p2)/(v2-q2);var hF=(v2*v2-q2*q2+u2*u2-p2*p2)/(2*(v2-q2));lines.push(this.axiom1(new XY(0,hF),new XY(1,mF+hF)))}
else{var kG=(u2+p2)/2;lines.push(this.axiom1(new XY(kG,0),new XY(kG,1)))}}}
return lines}
axiom7(point,ontoLine,perp){var newLine=new Line(point,new Edge(perp).vector());var intersection=newLine.intersection(new Edge(ontoLine).infiniteLine());if(intersection===undefined){return undefined}
return this.axiom2(point,intersection)};newCreaseBetweenNodes(aNode,bNode){this.unclean=!0;return this.newEdge(a,b)}
newCrease(a_x,a_y,b_x,b_y){this.creaseSymmetry(a_x,a_y,b_x,b_y);var newCrease=this.newPlanarEdge(a_x,a_y,b_x,b_y);if(this.didChange!==undefined){this.didChange(undefined)}
return newCrease}
creaseSymmetry(ax,ay,bx,by){if(this.symmetryLine===undefined){return undefined}
var ra=new XY(ax,ay).reflect(this.symmetryLine);var rb=new XY(bx,by).reflect(this.symmetryLine);return this.newPlanarEdge(ra.x,ra.y,rb.x,rb.y)}
crease(a,b,c,d){if(a instanceof Line){return this.creaseLine(a)}
if(a instanceof Edge){return this.creaseEdge(a)}
if(a instanceof Ray){return this.creaseRay(a)}
var e=gimme1Edge$1(a,b,c,d);if(e===undefined){return}
var edge=this.boundary.clipEdge(e);if(edge===undefined){return}
return this.newCrease(edge.nodes[0].x,edge.nodes[0].y,edge.nodes[1].x,edge.nodes[1].y)}
creaseAndStop(a,b,c,d){if(a instanceof Line){var endpoints=a.rays().map(function(ray){return ray.intersectionsWithEdges(this.edges).shift()},this).filter(function(el){return el!=undefined},this);if(endpoints.length<2){return this.creaseLine(a)}
return this.creaseEdge(endpoints[0],endpoints[1])}
if(a instanceof Ray){var intersections=a.intersectionsWithEdges(this.edges).filter(function(point){return!point.equivalent(a.origin)});var intersection=intersections.shift();if(intersection==undefined){return this.creaseRay(a)}
return this.creaseEdge(a.origin,intersection)}
var e=gimme1Edge$1(a,b,c,d);var point0Ray=new Ray(e.nodes[0],new XY(e.nodes[1].x-e.nodes[0].x,e.nodes[1].y-e.nodes[0].y));var edgeDetail=point0Ray.clipWithEdgesDetails(this.edges).shift();if(edgeDetail==undefined){return}
if(edgeDetail.edge.length()<e.length()){return this.creaseEdge(edgeDetail.edge)}
return this.creaseEdge(e)}
creaseAndReflect(a,b,c,d){if(a instanceof Line){return a.rays().map(function(ray){return this.creaseRayRepeat(ray)},this).reduce(function(prev,curr){return prev.concat(curr)},[])}
if(a instanceof Ray){return this.creaseRayRepeat(a)}
if(isValidPoint$2(a)&&isValidPoint$2(b)){return this.creaseRayRepeat(new Ray(a,b))}
return undefined}
creaseLine(a,b,c,d){var line=gimme1Line$1(a,b,c,d);if(line===undefined){return}
var edge=this.boundary.clipLine(line);if(edge===undefined){return}
return this.newCrease(edge.nodes[0].x,edge.nodes[0].y,edge.nodes[1].x,edge.nodes[1].y)}
creaseRay(a,b,c,d){var ray=gimme1Ray$1(a,b,c,d);if(ray===undefined){return}
var edge=this.boundary.clipRay(ray);if(edge===undefined){return}
var newCrease=this.newCrease(edge.nodes[0].x,edge.nodes[0].y,edge.nodes[1].x,edge.nodes[1].y);return newCrease}
creaseEdge(a,b,c,d){var e=gimme1Edge$1(a,b,c,d);if(e===undefined){return}
var edge=this.boundary.clipEdge(e);if(edge===undefined){return}
return this.newCrease(edge.nodes[0].x,edge.nodes[0].y,edge.nodes[1].x,edge.nodes[1].y)}
creaseRayUntilIntersection(ray,target){var clips=ray.clipWithEdgesDetails(this.edges);if(clips.length>0){if(target!==undefined){var targetEdge=new Edge(ray.origin.x,ray.origin.y,target.x,target.y);if(clips[0].edge.length()>targetEdge.length()){return this.crease(targetEdge)}}
return this.crease(clips[0].edge)}
return undefined}
creaseLineRepeat(a,b,c,d){var ray=gimme1Ray$1(a,b,c,d);return this.creaseRayRepeat(ray).concat(this.creaseRayRepeat(ray.flip()))}
creaseRayRepeat(ray,target){return new Polyline().rayReflectRepeat(ray,this.edges,target).edges().map(function(edge){return this.crease(edge)},this).filter(function(el){return el!=undefined})}
creasePolyline(polyline){return polyline.edges().map(function(edge){return this.crease(edge)},this).filter(function(el){return el!=undefined})}
creaseThroughPoints(a,b,c,d){var l=this.axiom1(a,b,c,d);if(l===undefined){return undefined}
var newCrease=l.crease();return newCrease}
creasePointToPoint(a,b,c,d){var l=this.axiom2(a,b,c,d);if(l===undefined){return undefined}
var newCrease=l.crease();return newCrease}
creaseEdgeToEdge(one,two){return this.axiom3(one,two).map(function(line){return line.crease()},this).filter(function(edge){return edge!==undefined},this)}
creasePerpendicularThroughPoint(line,point){var l=this.axiom4(line,point);if(l===undefined){return undefined}
var newCrease=l.crease();return newCrease}
creasePointToLine(origin,point,line){return this.axiom5(origin,point,line).map(function(line){return line.crease()},this).filter(function(edge){return edge!==undefined},this)}
creasePointsToLines(point1,point2,line1,line2){return this.axiom6(point1,point2,line1,line2).map(function(line){return line.crease()},this).filter(function(edge){return edge!==undefined},this)}
creasePerpendicularPointOntoLine(point,ontoLine,perp){var l=this.axiom7(point,ontoLine,perp);if(l===undefined){return undefined}
var newCrease=l.crease();return newCrease}
pleat(count,one,two){var a=new Edge(one.nodes[0].x,one.nodes[0].y,one.nodes[1].x,one.nodes[1].y);var b=new Edge(two.nodes[0].x,two.nodes[0].y,two.nodes[1].x,two.nodes[1].y);return a.infiniteLine().subsect(b.infiniteLine(),count).map(function(line){return this.boundary.clipLine(line)},this).filter(function(el){return el!=undefined},this).map(function(el){return this.newCrease(el.nodes[0].x,el.nodes[0].y,el.nodes[1].x,el.nodes[1].y)},this)}
glitchPleat(one,two,count){var a=new Edge(one.nodes[0].x,one.nodes[0].y,one.nodes[1].x,one.nodes[1].y);var b=new Edge(two.nodes[0].x,two.nodes[0].y,two.nodes[1].x,two.nodes[1].y);var u=a.nodes[0].subtract(a.nodes[1]);var v=b.nodes[0].subtract(b.nodes[1]);return Array.apply(null,Array(count-1)).map(function(el,i){return(i+1)/count},this).map(function(el){var origin=a.nodes[0].lerp(b.nodes[0],el);var vector=u.lerp(v,el);return this.boundary.clipLine(new Line(origin,vector))},this).filter(function(el){return el!==undefined},this).map(function(el){return this.newCrease(el.nodes[0].x,el.nodes[0].y,el.nodes[1].x,el.nodes[1].y)},this)}
availableAxiomFolds(){var edges=[];edges=edges.concat(this.availableAxiom1Folds());edges=edges.concat(this.availableAxiom2Folds());edges=edges.concat(this.availableAxiom3Folds());return edges}
availableAxiom1Folds(){var edges=[];for(var n0=0;n0<this.nodes.length-1;n0++){for(var n1=n0+1;n1<this.nodes.length;n1++){var inputEdge=new Edge(this.nodes[n0],this.nodes[n1]);var edge=this.boundary.clipLine(inputEdge.infiniteLine());if(edge!==undefined){var cpedge=new CPEdge(this,edge);cpedge.madeBy=new Fold(this.creaseThroughPoints,[new XY(this.nodes[n0].x,this.nodes[n0].y),new XY(this.nodes[n1].x,this.nodes[n1].y)]);edges.push(cpedge)}}}
return edges}
availableAxiom2Folds(){var edges=[];for(var n0=0;n0<this.nodes.length-1;n0++){for(var n1=n0+1;n1<this.nodes.length;n1++){var inputEdge=new Edge(this.nodes[n0],this.nodes[n1]);var edge=this.boundary.clipLine(inputEdge.perpendicularBisector());if(edge!==undefined){var cpedge=new CPEdge(this,edge);cpedge.madeBy=new Fold(this.creasePointToPoint,[new XY(this.nodes[n0].x,this.nodes[n0].y),new XY(this.nodes[n1].x,this.nodes[n1].y)]);edges.push(cpedge)}}}
return edges}
availableAxiom3Folds(){var edges=[];for(var e0=0;e0<this.edges.length-1;e0++){for(var e1=e0+1;e1<this.edges.length;e1++){var a=this.edges[e0].infiniteLine();var b=this.edges[e1].infiniteLine();var pair=a.bisect(b).map(function(line){return this.boundary.clipLine(line)},this).filter(function(el){return el!==undefined},this);var p=pair.map(function(edge){var cpedge=new CPEdge(this,edge);cpedge.madeBy=new Fold(this.creaseEdgeToEdge,[this.edges[e0].copy(),this.edges[e1].copy()]);return cpedge},this);edges=edges.concat(p)}}
return edges}
availableAxiom4Folds(){var edges=[];for(var e=0;e<this.edges.length;e++){for(var n=0;n<this.nodes.length;n++){var point=new XY(this.nodes[n].x,this.nodes[n].y);var edge=this.boundary.clipLine(new Line(point,this.edges[e].vector().rotate90()));if(edge!=undefined){var cpedge=new CPEdge(this,edge);cpedge.madeBy=new Fold(this.creasePerpendicularThroughPoint,[point,new Edge(this.edges[e].nodes[0].copy(),this.edges[e].nodes[1].copy())]);edges.push(cpedge)}}}
return edges}
wiggle(epsilon){if(epsilon===undefined){epsilon=0.00001}
var lengths=this.edges.forEach(function(crease,i){return crease.length()});var nodesAttempted=0;for(var i=0;i<this.nodes.length;i++){var rating=this.nodes[i].kawasakiRating();if(rating>epsilon){nodesAttempted++;var guesses=[];for(var n=0;n<12;n++){var randomAngle=Math.random()*Math.PI*20;var radius=Math.random()*rating;var move=new XY(0.05*radius*Math.cos(randomAngle),0.05*radius*Math.sin(randomAngle));this.nodes[i].x+=move.x;this.nodes[i].y+=move.y;var newRating=this.nodes[i].kawasakiRating();var adjNodes=this.nodes[i].adjacentNodes();var adjRating=0;for(var adj=0;adj<adjNodes.length;adj++){adjRating+=this.nodes[i].kawasakiRating()}
guesses.push({xy:move,rating:newRating+adjRating});this.nodes[i].x-=move.x;this.nodes[i].y-=move.y}
var sortedGuesses=guesses.sort(function(a,b){return a.rating-b.rating});this.nodes[i].x+=sortedGuesses[0].xy.x;this.nodes[i].y+=sortedGuesses[0].xy.y}}
return nodesAttempted}
flatFoldable(){return this.nodes.map(function(el){return el.flatFoldable()}).reduce(function(prev,cur){return prev&&cur})}
boundaryBounds(){return this.boundary.minimumRect()}
bottomEdge(){return this.edges.filter(function(el){return el.orientation===CreaseDirection.boundary}).sort(function(a,b){return(b.nodes[0].y+b.nodes[1].y)-(a.nodes[0].y+a.nodes[1].y)}).shift()}
topEdge(){return this.edges.filter(function(el){return el.orientation===CreaseDirection.boundary}).sort(function(a,b){return(a.nodes[0].y+a.nodes[1].y)-(b.nodes[0].y+b.nodes[1].y)}).shift()}
rightEdge(){return this.edges.filter(function(el){return el.orientation===CreaseDirection.boundary}).sort(function(a,b){return(b.nodes[0].x+b.nodes[1].x)-(a.nodes[0].x+a.nodes[1].x)}).shift()}
leftEdge(){return this.edges.filter(function(el){return el.orientation===CreaseDirection.boundary}).sort(function(a,b){return(a.nodes[0].x+a.nodes[1].x)-(b.nodes[0].x+b.nodes[1].x)}).shift()}
overlapRelationMatrix(){this.clean();var matrix=Array.apply(null,Array(this.faces.length)).map(function(e){return Array.apply(null,Array(this.faces.length))},this);var adj=this.faces.map(function(face){return face.edgeAdjacentFaces()},this);adj.forEach(function(adjFaces,i){var face=this.faces[i];adjFaces.filter(function(adjFace){return matrix[face.index][adjFace.index]==undefined},this).forEach(function(adjFace){var thisEdge=face.commonEdges(adjFace).shift();switch(thisEdge.orientation){case CreaseDirection.mountain:matrix[face.index][adjFace.index]=!0;break;case CreaseDirection.valley:matrix[face.index][adjFace.index]=!1;break}},this)},this);console.log(matrix);return undefined}
removeAllMarks(){for(var i=this.edges.length-1;i>=0;i--){if(this.edges[i].orientation===CreaseDirection.mark){i-=this.removeEdge(this.edges[i]).edges.total-1}}
this.clean();return this}
fold(face){this.clean();var copyCP=this.copy().removeAllMarks();if(face==undefined){var bounds=copyCP.boundaryBounds();face=copyCP.nearest(bounds.origin.x+bounds.size.width*0.5,bounds.origin.y+bounds.size.height*0.5).face}else{var centroid=face.centroid();face=copyCP.nearest(centroid.x,centroid.y).face}
if(face===undefined){return}
var tree=face.adjacentFaceTree();var faces=[];tree.matrix=new Matrix();faces.push({'face':tree.obj,'matrix':tree.matrix});function recurse(node){node.children.forEach(function(child){var local=child.obj.commonEdges(child.parent.obj).shift().reflectionMatrix();child.matrix=child.parent.matrix.mult(local);faces.push({'face':child.obj,'matrix':child.matrix});recurse(child)},this)}
recurse(tree);var nodeTransformed=Array.apply(!1,Array(copyCP.nodes.length));faces.forEach(function(f){f.face.cache=f.matrix;f.face.nodes.filter(function(node){return!nodeTransformed[node.index]},this).forEach(function(node){node.transform(f.matrix);nodeTransformed[node.index]=!0},this)},this);return copyCP.exportFoldFile()}
foldSVG(face){this.clean();var copyCP=this.copy().removeAllMarks();if(face==undefined){var bounds=copyCP.boundaryBounds();face=copyCP.nearest(bounds.origin.x+bounds.size.width*0.5,bounds.origin.y+bounds.size.height*0.5).face}
if(face===undefined){return}
var tree=face.adjacentFaceTree();var faces=[];tree.matrix=new Matrix();faces.push({'face':tree.obj,'matrix':tree.matrix});function recurse(node){node.children.forEach(function(child){var local=child.obj.commonEdges(child.parent.obj).shift().reflectionMatrix();child.matrix=child.parent.matrix.mult(local);faces.push({'face':child.obj,'matrix':child.matrix});recurse(child)},this)}
recurse(tree);var nodeTransformed=Array.apply(!1,Array(copyCP.nodes.length));faces.forEach(function(el){el.face.nodes.filter(function(node){return!nodeTransformed[node.index]},this).forEach(function(node){node.transform(el.matrix);nodeTransformed[node.index]=!0},this)},this);return copyCP.exportSVG()}
importCreasePattern(cp){this.nodes=cp.nodes;this.edges=cp.edges;this.faces=cp.faces;this.junctions=cp.junctions;this.sectors=cp.sectors;this.boundary=cp.boundary;this.symmetryLine=cp.symmetryLine;this.foldSequence=cp.foldSequence}
export(fileType){switch(fileType.toLowerCase()){case "fold":return this.exportFoldFile();case "svg":return this.exportSVG()}}
exportFoldFile(){this.nodeArrayDidChange();this.edgeArrayDidChange();var file={};file.file_spec=1;file.file_creator="Rabbit Ear";file.file_author="";file.file_classes=["singleModel"];file.vertices_coords=this.nodes.map(function(node){return[cleanNumber$1(node.x,12),cleanNumber$1(node.y,12)]},this);file.faces_vertices=this.faces.map(function(face){return face.nodes.map(function(node){return node.index},this)},this);file.edges_vertices=this.edges.map(function(edge){return edge.nodes.map(function(node){return node.index},this)},this);file.edges_assignment=this.edges.map(function(edge){switch(edge.orientation){case CreaseDirection.boundary:return"B";case CreaseDirection.mountain:return"M";case CreaseDirection.valley:return"V";case CreaseDirection.mark:return"F";default:return"U"}},this);file.face_matrices=this.faces.map(function(face){if(face.cache!=undefined){var m=face.cache;return[m.a,m.b,m.c,m.d,m.tx,m.ty]}else{return[1,0,0,1,0,0]}});return file}
importFoldFile(file,epsilon){if(file===undefined||file.vertices_coords===undefined||file.edges_vertices===undefined){return undefined}
if(file.frame_attributes!==undefined&&file.frame_attributes.contains("3D")){console.log("importFoldFile(): FOLD file marked as '3D', this library only supports 2D. attempting import anyway, expect a possible distortion due to orthogonal projection.")}
this.noBoundary();this.clear();file.vertices_coords.forEach(function(el){this.newPlanarNode((el[0]||0),(el[1]||0))},this);this.nodeArrayDidChange();file.edges_vertices.map(function(el){return el.map(function(index){return this.nodes[index]},this)},this).filter(function(el){return el[0]!==undefined&&el[1]!==undefined},this).forEach(function(nodes){this.newPlanarEdgeBetweenNodes(nodes[0],nodes[1])},this);this.edgeArrayDidChange();var assignmentDictionary={"B":CreaseDirection.boundary,"M":CreaseDirection.mountain,"V":CreaseDirection.valley,"F":CreaseDirection.mark,"U":CreaseDirection.mark};file.edges_assignment.map(function(assignment){return assignmentDictionary[assignment]}).forEach(function(orientation,i){this.edges[i].orientation=orientation},this);this.faces=file.faces_vertices.map(function(faceNodeArray,fi){var face=new CreaseFace(this);face.nodes=faceNodeArray.map(function(nodeIndex){return this.nodes[nodeIndex]},this);face.edges=face.nodes.map(function(node,ei){var nextNode=face.nodes[(ei+1)%face.nodes.length];return this.getEdgeConnectingNodes(node,nextNode)},this);return face},this);this.faceArrayDidChange();var boundaryPoints=this.edges.filter(function(el){return el.orientation===CreaseDirection.boundary},this).map(function(el){return[new XY(el.nodes[0].x,el.nodes[0].y),new XY(el.nodes[1].x,el.nodes[1].y)]},this);this.setBoundary([].concat.apply([],boundaryPoints));this.clean(epsilon);return this}
importSVG(data){var cp=SVGLoader(data);this.importCreasePattern(cp);return this};exportSVG(size){if(size===undefined||size<=0){size=600}
var bounds=this.boundaryBounds();var width=bounds.size.width;var height=bounds.size.height;var scale=size/(width);var origins=[bounds.origin.x,bounds.origin.y];var widthScaled=cleanNumber$1(width*scale).toString();var heightScaled=cleanNumber$1(height*scale).toString();var dashW=cleanNumber$1(width*scale*0.0025*4).toString();var dashWOff=dashW;var strokeWidthNum=width*scale*0.0025*2;var strokeWidth=strokeWidthNum<0.5?0.5:cleanNumber$1(strokeWidthNum).toString();if(strokeWidth==0){strokeWidth=0.5}
var valleyStyle="stroke=\"#4379FF\" stroke-linecap=\"round\" stroke-dasharray=\""+dashW+","+dashWOff+"\" ";var mountainStyle="stroke=\"#EE1032\" ";var noStyle="stroke=\"#000000\" ";var blob="<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- generated by Rabbit Ear https://rabbitear.org -->\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\""+widthScaled+"px\" height=\""+heightScaled+"px\" viewBox=\"0 0 "+widthScaled+" "+heightScaled+"\">\n";var orientationList=[CreaseDirection.mark,CreaseDirection.valley,CreaseDirection.mountain,CreaseDirection.boundary];var styles=[noStyle,valleyStyle,mountainStyle,noStyle];var gNames=["marks","valley","mountain","boundary"];var sortedCreases=orientationList.map(function(orient){return this.edges.filter(function(e){return e.orientation==orient},this)},this);sortedCreases.unshift(this.edges.filter(function(e){return orientationList.filter(function(el){return el==e.orientation},this).length==0},this));gNames.unshift("other");styles.unshift(noStyle);sortedCreases.forEach(function(creases,i){if(creases.length==0){return}
blob+="<g id=\""+gNames[i]+"\">\n";var style=styles[i];creases.forEach(function(crease){var p=crease.nodes.map(function(el){return[el.x,el.y]},this).reduce(function(prev,curr){return prev.concat(curr)},[]).map(function(el,i){return(el-origins[i%2])*scale},this).map(function(number){return cleanNumber$1(number,12).toString()},this);blob+="\t<line "+style+"stroke-width=\""+strokeWidth+"\" x1=\""+p[0]+"\" y1=\""+p[1]+"\" x2=\""+p[2]+"\" y2=\""+p[3]+"\"/>\n"},this);blob+="</g>\n"},this);blob+="</svg>\n";return blob}
exportSVGMin(size){if(size===undefined||size<=0){size=600}
var bounds=this.boundaryBounds();var width=bounds.size.width;var height=bounds.size.height;var padX=bounds.origin.x;var padY=bounds.origin.y;var scale=size/(width+padX*2);var strokeWidth=(width*scale*0.0025).toFixed(1);if(strokeWidth==="0"||strokeWidth==="0.0"){strokeWidth="0.5"}
var polylines=this.polylines();var blob="<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- generated by Rabbit Ear https://rabbitear.org -->\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\""+((width+padX*2)*scale)+"px\" height=\""+((height+padY*2)*scale)+"px\" viewBox=\"0 0 "+((width+padX*2)*scale)+" "+((height+padY*2)*scale)+"\">\n<g>\n";for(var i=0;i<polylines.length;i++){if(polylines[i].nodes.length>=0){blob+="<polyline fill=\"none\" stroke-width=\""+strokeWidth+"\" stroke=\"#000000\" points=\"";for(var j=0;j<polylines[i].nodes.length;j++){var point=polylines[i].nodes[j];blob+=cleanNumber$1(scale*point.x,12).toString()+","+cleanNumber$1(scale*point.y,12).toString()+" "}
blob+="\"/>\n"}}
blob=blob+"</g>\n</svg>\n";return blob}
kiteBase(){return this.importFoldFile({"vertices_coords":[[0,0],[1,0],[1,1],[0,1],[0.4142135623730955,0],[1,0.5857864376269045]],"faces_vertices":[[2,3,5],[3,0,4],[3,1,5],[1,3,4]],"edges_vertices":[[2,3],[3,0],[3,1],[3,4],[0,4],[4,1],[3,5],[1,5],[5,2]],"edges_assignment":["B","B","V","M","B","B","M","B","B"]})}
fishBase(){return this.importFoldFile({"vertices_coords":[[0,0],[1,0],[1,1],[0,1],[0.292893218813,0.292893218813],[0.707106781187,0.707106781187],[0.292893218813,0],[1,0.707106781187]],"faces_vertices":[[2,3,5],[3,0,4],[3,1,5],[1,3,4],[4,0,6],[1,4,6],[5,1,7],[2,5,7]],"edges_vertices":[[2,3],[3,0],[3,1],[0,4],[1,4],[3,4],[1,5],[2,5],[3,5],[4,6],[0,6],[6,1],[5,7],[1,7],[7,2]],"edges_assignment":["B","B","V","M","M","M","M","M","M","V","B","B","V","B","B"]})}
birdBase(){return this.importFoldFile({"vertices_coords":[[0,0],[1,0],[1,1],[0,1],[0.5,0.5],[0.207106781187,0.5],[0.5,0.207106781187],[0.792893218813,0.5],[0.5,0.792893218813],[0.353553390593,0.646446609407],[0.646446609407,0.646446609407],[0.646446609407,0.353553390593],[0.353553390593,0.353553390593],[0,0.5],[0.5,0],[1,0.5],[0.5,1]],"faces_vertices":[[3,5,9],[5,3,13],[0,5,13],[5,0,12],[4,5,12],[5,4,9],[0,6,12],[6,0,14],[1,6,14],[6,1,11],[4,6,11],[6,4,12],[1,7,11],[7,1,15],[2,7,15],[7,2,10],[4,7,10],[7,4,11],[2,8,10],[8,2,16],[3,8,16],[8,3,9],[4,8,9],[8,4,10]],"edges_vertices":[[3,5],[0,5],[4,5],[0,6],[1,6],[4,6],[1,7],[2,7],[4,7],[2,8],[3,8],[4,8],[5,9],[9,8],[9,4],[3,9],[8,10],[10,7],[4,10],[10,2],[7,11],[11,6],[4,11],[11,1],[6,12],[12,5],[0,12],[12,4],[5,13],[0,13],[13,3],[6,14],[0,14],[14,1],[7,15],[1,15],[15,2],[8,16],[3,16],[16,2]],"edges_assignment":["M","M","M","M","M","M","M","M","M","M","M","M","F","F","F","F","F","F","V","V","F","F","F","F","F","F","V","V","V","B","B","V","B","B","V","B","B","V","B","B"]})}
frogBase(){return this.importFoldFile({"vertices_coords":[[0,0],[1,0],[1,1],[0,1],[0.5,0.5],[0,0.5],[0.5,0],[1,0.5],[0.5,1],[0.146446609407,0.353553390593],[0.353553390593,0.146446609407],[0.646446609407,0.146446609407],[0.853553390593,0.353553390593],[0.853553390593,0.646446609407],[0.646446609407,0.853553390593],[0.353553390593,0.853553390593],[0.146446609407,0.646446609407],[0,0.353553390593],[0,0.646446609407],[0.353553390593,0],[0.646446609407,0],[1,0.353553390593],[1,0.646446609407],[0.646446609407,1],[0.353553390593,1]],"faces_vertices":[[0,4,9],[4,0,10],[4,2,14],[2,4,13],[3,4,15],[4,3,16],[4,1,12],[1,4,11],[4,5,9],[5,4,16],[4,6,11],[6,4,10],[4,7,13],[7,4,12],[4,8,15],[8,4,14],[0,9,17],[9,5,17],[10,0,19],[6,10,19],[1,11,20],[11,6,20],[12,1,21],[7,12,21],[2,13,22],[13,7,22],[14,2,23],[8,14,23],[3,15,24],[15,8,24],[16,3,18],[5,16,18]],"edges_vertices":[[0,4],[4,2],[3,4],[4,1],[4,5],[4,6],[4,7],[4,8],[0,9],[4,9],[5,9],[4,10],[0,10],[6,10],[1,11],[4,11],[6,11],[4,12],[1,12],[7,12],[2,13],[4,13],[7,13],[4,14],[2,14],[8,14],[3,15],[4,15],[8,15],[4,16],[3,16],[5,16],[9,17],[0,17],[17,5],[16,18],[5,18],[18,3],[10,19],[0,19],[19,6],[11,20],[6,20],[20,1],[12,21],[1,21],[21,7],[13,22],[7,22],[22,2],[14,23],[8,23],[23,2],[15,24],[3,24],[24,8]],"edges_assignment":["V","V","V","M","V","V","V","V","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","M","V","B","B","V","B","B","V","B","B","V","B","B","V","B","B","V","B","B","V","B","B","V","B","B"]})}
copy(){this.nodeArrayDidChange();this.edgeArrayDidChange();this.faceArrayDidChange();var g=new CreasePattern();g.nodes=[];g.edges=[];g.faces=[];g.boundary=undefined;for(var i=0;i<this.nodes.length;i++){var n=g.addNode(new CreaseNode(g));Object.assign(n,this.nodes[i]);n.graph=g;n.index=i}
for(var i=0;i<this.edges.length;i++){var index=[this.edges[i].nodes[0].index,this.edges[i].nodes[1].index];var e=g.addEdge(new Crease(g,g.nodes[index[0]],g.nodes[index[1]]));Object.assign(e,this.edges[i]);e.graph=g;e.index=i;e.nodes=[g.nodes[index[0]],g.nodes[index[1]]]}
for(var i=0;i<this.faces.length;i++){var f=new PlanarFace(g);g.faces.push(f);f.graph=g;f.index=i;if(this.faces[i]!==undefined){if(this.faces[i].nodes!==undefined){for(var j=0;j<this.faces[i].nodes.length;j++){var nIndex=this.faces[i].nodes[j].index;f.nodes.push(g.nodes[nIndex])}}
if(this.faces[i].edges!==undefined){for(var j=0;j<this.faces[i].edges.length;j++){var eIndex=this.faces[i].edges[j].index;f.edges.push(g.edges[eIndex])}}}}
g.sectors=this.sectors.map(function(sector,i){var gSecEdges=sector.edges.map(function(edge){return g.edges[edge.index]},this);var s=new CreaseSector(gSecEdges[0],gSecEdges[1]);s.index=i;return s},this);g.junctions=this.junctions.map(function(junction,i){var j=new CreaseJunction(undefined);j.origin=g.nodes[junction.origin.index];j.sectors=junction.sectors.map(function(sector){return g.sectors[sector.index]},this);j.edges=junction.edges.map(function(edge){return g.edges[edge.index]},this);j.index=i;return j},this);g.boundary=this.boundary.copy();return g}}
function constant(x){return function(){return x}}
function x(d){return d[0]}
function y(d){return d[1]}
function RedBlackTree(){this._=null}
function RedBlackNode(node){node.U=node.C=node.L=node.R=node.P=node.N=null}
RedBlackTree.prototype={constructor:RedBlackTree,insert:function(after,node){var parent,grandpa,uncle;if(after){node.P=after;node.N=after.N;if(after.N)after.N.P=node;after.N=node;if(after.R){after=after.R;while(after.L)after=after.L;after.L=node}else{after.R=node}
parent=after}else if(this._){after=RedBlackFirst(this._);node.P=null;node.N=after;after.P=after.L=node;parent=after}else{node.P=node.N=null;this._=node;parent=null}
node.L=node.R=null;node.U=parent;node.C=!0;after=node;while(parent&&parent.C){grandpa=parent.U;if(parent===grandpa.L){uncle=grandpa.R;if(uncle&&uncle.C){parent.C=uncle.C=!1;grandpa.C=!0;after=grandpa}else{if(after===parent.R){RedBlackRotateLeft(this,parent);after=parent;parent=after.U}
parent.C=!1;grandpa.C=!0;RedBlackRotateRight(this,grandpa)}}else{uncle=grandpa.L;if(uncle&&uncle.C){parent.C=uncle.C=!1;grandpa.C=!0;after=grandpa}else{if(after===parent.L){RedBlackRotateRight(this,parent);after=parent;parent=after.U}
parent.C=!1;grandpa.C=!0;RedBlackRotateLeft(this,grandpa)}}
parent=after.U}
this._.C=!1},remove:function(node){if(node.N)node.N.P=node.P;if(node.P)node.P.N=node.N;node.N=node.P=null;var parent=node.U,sibling,left=node.L,right=node.R,next,red;if(!left)next=right;else if(!right)next=left;else next=RedBlackFirst(right);if(parent){if(parent.L===node)parent.L=next;else parent.R=next}else{this._=next}
if(left&&right){red=next.C;next.C=node.C;next.L=left;left.U=next;if(next!==right){parent=next.U;next.U=node.U;node=next.R;parent.L=node;next.R=right;right.U=next}else{next.U=parent;parent=next;node=next.R}}else{red=node.C;node=next}
if(node)node.U=parent;if(red)return;if(node&&node.C){node.C=!1;return}
do{if(node===this._)break;if(node===parent.L){sibling=parent.R;if(sibling.C){sibling.C=!1;parent.C=!0;RedBlackRotateLeft(this,parent);sibling=parent.R}
if((sibling.L&&sibling.L.C)||(sibling.R&&sibling.R.C)){if(!sibling.R||!sibling.R.C){sibling.L.C=!1;sibling.C=!0;RedBlackRotateRight(this,sibling);sibling=parent.R}
sibling.C=parent.C;parent.C=sibling.R.C=!1;RedBlackRotateLeft(this,parent);node=this._;break}}else{sibling=parent.L;if(sibling.C){sibling.C=!1;parent.C=!0;RedBlackRotateRight(this,parent);sibling=parent.L}
if((sibling.L&&sibling.L.C)||(sibling.R&&sibling.R.C)){if(!sibling.L||!sibling.L.C){sibling.R.C=!1;sibling.C=!0;RedBlackRotateLeft(this,sibling);sibling=parent.L}
sibling.C=parent.C;parent.C=sibling.L.C=!1;RedBlackRotateRight(this,parent);node=this._;break}}
sibling.C=!0;node=parent;parent=parent.U}while(!node.C);if(node)node.C=!1}};function RedBlackRotateLeft(tree,node){var p=node,q=node.R,parent=p.U;if(parent){if(parent.L===p)parent.L=q;else parent.R=q}else{tree._=q}
q.U=parent;p.U=q;p.R=q.L;if(p.R)p.R.U=p;q.L=p}
function RedBlackRotateRight(tree,node){var p=node,q=node.L,parent=p.U;if(parent){if(parent.L===p)parent.L=q;else parent.R=q}else{tree._=q}
q.U=parent;p.U=q;p.L=q.R;if(p.L)p.L.U=p;q.R=p}
function RedBlackFirst(node){while(node.L)node=node.L;return node}
function createEdge(left,right,v0,v1){var edge=[null,null],index=edges.push(edge)-1;edge.left=left;edge.right=right;if(v0)setEdgeEnd(edge,left,right,v0);if(v1)setEdgeEnd(edge,right,left,v1);cells[left.index].halfedges.push(index);cells[right.index].halfedges.push(index);return edge}
function createBorderEdge(left,v0,v1){var edge=[v0,v1];edge.left=left;return edge}
function setEdgeEnd(edge,left,right,vertex){if(!edge[0]&&!edge[1]){edge[0]=vertex;edge.left=left;edge.right=right}else if(edge.left===right){edge[1]=vertex}else{edge[0]=vertex}}
function clipEdge(edge,x0,y0,x1,y1){var a=edge[0],b=edge[1],ax=a[0],ay=a[1],bx=b[0],by=b[1],t0=0,t1=1,dx=bx-ax,dy=by-ay,r;r=x0-ax;if(!dx&&r>0)return;r/=dx;if(dx<0){if(r<t0)return;if(r<t1)t1=r}else if(dx>0){if(r>t1)return;if(r>t0)t0=r}
r=x1-ax;if(!dx&&r<0)return;r/=dx;if(dx<0){if(r>t1)return;if(r>t0)t0=r}else if(dx>0){if(r<t0)return;if(r<t1)t1=r}
r=y0-ay;if(!dy&&r>0)return;r/=dy;if(dy<0){if(r<t0)return;if(r<t1)t1=r}else if(dy>0){if(r>t1)return;if(r>t0)t0=r}
r=y1-ay;if(!dy&&r<0)return;r/=dy;if(dy<0){if(r>t1)return;if(r>t0)t0=r}else if(dy>0){if(r<t0)return;if(r<t1)t1=r}
if(!(t0>0)&&!(t1<1))return!0;if(t0>0)edge[0]=[ax+t0*dx,ay+t0*dy];if(t1<1)edge[1]=[ax+t1*dx,ay+t1*dy];return!0}
function connectEdge(edge,x0,y0,x1,y1){var v1=edge[1];if(v1)return!0;var v0=edge[0],left=edge.left,right=edge.right,lx=left[0],ly=left[1],rx=right[0],ry=right[1],fx=(lx+rx)/2,fy=(ly+ry)/2,fm,fb;if(ry===ly){if(fx<x0||fx>=x1)return;if(lx>rx){if(!v0)v0=[fx,y0];else if(v0[1]>=y1)return;v1=[fx,y1]}else{if(!v0)v0=[fx,y1];else if(v0[1]<y0)return;v1=[fx,y0]}}else{fm=(lx-rx)/(ry-ly);fb=fy-fm*fx;if(fm<-1||fm>1){if(lx>rx){if(!v0)v0=[(y0-fb)/fm,y0];else if(v0[1]>=y1)return;v1=[(y1-fb)/fm,y1]}else{if(!v0)v0=[(y1-fb)/fm,y1];else if(v0[1]<y0)return;v1=[(y0-fb)/fm,y0]}}else{if(ly<ry){if(!v0)v0=[x0,fm*x0+fb];else if(v0[0]>=x1)return;v1=[x1,fm*x1+fb]}else{if(!v0)v0=[x1,fm*x1+fb];else if(v0[0]<x0)return;v1=[x0,fm*x0+fb]}}}
edge[0]=v0;edge[1]=v1;return!0}
function clipEdges(x0,y0,x1,y1){var i=edges.length,edge;while(i--){if(!connectEdge(edge=edges[i],x0,y0,x1,y1)||!clipEdge(edge,x0,y0,x1,y1)||!(Math.abs(edge[0][0]-edge[1][0])>epsilon||Math.abs(edge[0][1]-edge[1][1])>epsilon)){delete edges[i]}}}
function createCell(site){return cells[site.index]={site:site,halfedges:[]}}
function cellHalfedgeAngle(cell,edge){var site=cell.site,va=edge.left,vb=edge.right;if(site===vb)vb=va,va=site;if(vb)return Math.atan2(vb[1]-va[1],vb[0]-va[0]);if(site===va)va=edge[1],vb=edge[0];else va=edge[0],vb=edge[1];return Math.atan2(va[0]-vb[0],vb[1]-va[1])}
function cellHalfedgeStart(cell,edge){return edge[+(edge.left!==cell.site)]}
function cellHalfedgeEnd(cell,edge){return edge[+(edge.left===cell.site)]}
function sortCellHalfedges(){for(var i=0,n=cells.length,cell,halfedges,j,m;i<n;++i){if((cell=cells[i])&&(m=(halfedges=cell.halfedges).length)){var index=new Array(m),array=new Array(m);for(j=0;j<m;++j)index[j]=j,array[j]=cellHalfedgeAngle(cell,edges[halfedges[j]]);index.sort(function(i,j){return array[j]-array[i]});for(j=0;j<m;++j)array[j]=halfedges[index[j]];for(j=0;j<m;++j)halfedges[j]=array[j]}}}
function clipCells(x0,y0,x1,y1){var nCells=cells.length,iCell,cell,site,iHalfedge,halfedges,nHalfedges,start,startX,startY,end,endX,endY,cover=!0;for(iCell=0;iCell<nCells;++iCell){if(cell=cells[iCell]){site=cell.site;halfedges=cell.halfedges;iHalfedge=halfedges.length;while(iHalfedge--){if(!edges[halfedges[iHalfedge]]){halfedges.splice(iHalfedge,1)}}
iHalfedge=0,nHalfedges=halfedges.length;while(iHalfedge<nHalfedges){end=cellHalfedgeEnd(cell,edges[halfedges[iHalfedge]]),endX=end[0],endY=end[1];start=cellHalfedgeStart(cell,edges[halfedges[++iHalfedge%nHalfedges]]),startX=start[0],startY=start[1];if(Math.abs(endX-startX)>epsilon||Math.abs(endY-startY)>epsilon){halfedges.splice(iHalfedge,0,edges.push(createBorderEdge(site,end,Math.abs(endX-x0)<epsilon&&y1-endY>epsilon?[x0,Math.abs(startX-x0)<epsilon?startY:y1]:Math.abs(endY-y1)<epsilon&&x1-endX>epsilon?[Math.abs(startY-y1)<epsilon?startX:x1,y1]:Math.abs(endX-x1)<epsilon&&endY-y0>epsilon?[x1,Math.abs(startX-x1)<epsilon?startY:y0]:Math.abs(endY-y0)<epsilon&&endX-x0>epsilon?[Math.abs(startY-y0)<epsilon?startX:x0,y0]:null))-1);++nHalfedges}}
if(nHalfedges)cover=!1}}
if(cover){var dx,dy,d2,dc=Infinity;for(iCell=0,cover=null;iCell<nCells;++iCell){if(cell=cells[iCell]){site=cell.site;dx=site[0]-x0;dy=site[1]-y0;d2=dx*dx+dy*dy;if(d2<dc)dc=d2,cover=cell}}
if(cover){var v00=[x0,y0],v01=[x0,y1],v11=[x1,y1],v10=[x1,y0];cover.halfedges.push(edges.push(createBorderEdge(site=cover.site,v00,v01))-1,edges.push(createBorderEdge(site,v01,v11))-1,edges.push(createBorderEdge(site,v11,v10))-1,edges.push(createBorderEdge(site,v10,v00))-1)}}
for(iCell=0;iCell<nCells;++iCell){if(cell=cells[iCell]){if(!cell.halfedges.length){delete cells[iCell]}}}}
var circlePool=[];var firstCircle;function Circle$1(){RedBlackNode(this);this.x=this.y=this.arc=this.site=this.cy=null}
function attachCircle(arc){var lArc=arc.P,rArc=arc.N;if(!lArc||!rArc)return;var lSite=lArc.site,cSite=arc.site,rSite=rArc.site;if(lSite===rSite)return;var bx=cSite[0],by=cSite[1],ax=lSite[0]-bx,ay=lSite[1]-by,cx=rSite[0]-bx,cy=rSite[1]-by;var d=2*(ax*cy-ay*cx);if(d>=-epsilon2)return;var ha=ax*ax+ay*ay,hc=cx*cx+cy*cy,x=(cy*ha-ay*hc)/d,y=(ax*hc-cx*ha)/d;var circle=circlePool.pop()||new Circle$1;circle.arc=arc;circle.site=cSite;circle.x=x+bx;circle.y=(circle.cy=y+by)+Math.sqrt(x*x+y*y);arc.circle=circle;var before=null,node=circles._;while(node){if(circle.y<node.y||(circle.y===node.y&&circle.x<=node.x)){if(node.L)node=node.L;else{before=node.P;break}}else{if(node.R)node=node.R;else{before=node;break}}}
circles.insert(before,circle);if(!before)firstCircle=circle}
function detachCircle(arc){var circle=arc.circle;if(circle){if(!circle.P)firstCircle=circle.N;circles.remove(circle);circlePool.push(circle);RedBlackNode(circle);arc.circle=null}}
var beachPool=[];function Beach(){RedBlackNode(this);this.edge=this.site=this.circle=null}
function createBeach(site){var beach=beachPool.pop()||new Beach;beach.site=site;return beach}
function detachBeach(beach){detachCircle(beach);beaches.remove(beach);beachPool.push(beach);RedBlackNode(beach)}
function removeBeach(beach){var circle=beach.circle,x=circle.x,y=circle.cy,vertex=[x,y],previous=beach.P,next=beach.N,disappearing=[beach];detachBeach(beach);var lArc=previous;while(lArc.circle&&Math.abs(x-lArc.circle.x)<epsilon&&Math.abs(y-lArc.circle.cy)<epsilon){previous=lArc.P;disappearing.unshift(lArc);detachBeach(lArc);lArc=previous}
disappearing.unshift(lArc);detachCircle(lArc);var rArc=next;while(rArc.circle&&Math.abs(x-rArc.circle.x)<epsilon&&Math.abs(y-rArc.circle.cy)<epsilon){next=rArc.N;disappearing.push(rArc);detachBeach(rArc);rArc=next}
disappearing.push(rArc);detachCircle(rArc);var nArcs=disappearing.length,iArc;for(iArc=1;iArc<nArcs;++iArc){rArc=disappearing[iArc];lArc=disappearing[iArc-1];setEdgeEnd(rArc.edge,lArc.site,rArc.site,vertex)}
lArc=disappearing[0];rArc=disappearing[nArcs-1];rArc.edge=createEdge(lArc.site,rArc.site,null,vertex);attachCircle(lArc);attachCircle(rArc)}
function addBeach(site){var x=site[0],directrix=site[1],lArc,rArc,dxl,dxr,node=beaches._;while(node){dxl=leftBreakPoint(node,directrix)-x;if(dxl>epsilon)node=node.L;else{dxr=x-rightBreakPoint(node,directrix);if(dxr>epsilon){if(!node.R){lArc=node;break}
node=node.R}else{if(dxl>-epsilon){lArc=node.P;rArc=node}else if(dxr>-epsilon){lArc=node;rArc=node.N}else{lArc=rArc=node}
break}}}
createCell(site);var newArc=createBeach(site);beaches.insert(lArc,newArc);if(!lArc&&!rArc)return;if(lArc===rArc){detachCircle(lArc);rArc=createBeach(lArc.site);beaches.insert(newArc,rArc);newArc.edge=rArc.edge=createEdge(lArc.site,newArc.site);attachCircle(lArc);attachCircle(rArc);return}
if(!rArc){newArc.edge=createEdge(lArc.site,newArc.site);return}
detachCircle(lArc);detachCircle(rArc);var lSite=lArc.site,ax=lSite[0],ay=lSite[1],bx=site[0]-ax,by=site[1]-ay,rSite=rArc.site,cx=rSite[0]-ax,cy=rSite[1]-ay,d=2*(bx*cy-by*cx),hb=bx*bx+by*by,hc=cx*cx+cy*cy,vertex=[(cy*hb-by*hc)/d+ax,(bx*hc-cx*hb)/d+ay];setEdgeEnd(rArc.edge,lSite,rSite,vertex);newArc.edge=createEdge(lSite,site,null,vertex);rArc.edge=createEdge(site,rSite,null,vertex);attachCircle(lArc);attachCircle(rArc)}
function leftBreakPoint(arc,directrix){var site=arc.site,rfocx=site[0],rfocy=site[1],pby2=rfocy-directrix;if(!pby2)return rfocx;var lArc=arc.P;if(!lArc)return-Infinity;site=lArc.site;var lfocx=site[0],lfocy=site[1],plby2=lfocy-directrix;if(!plby2)return lfocx;var hl=lfocx-rfocx,aby2=1/pby2-1/plby2,b=hl/plby2;if(aby2)return(-b+Math.sqrt(b*b-2*aby2*(hl*hl/(-2*plby2)-lfocy+plby2/2+rfocy-pby2/2)))/aby2+rfocx;return(rfocx+lfocx)/2}
function rightBreakPoint(arc,directrix){var rArc=arc.N;if(rArc)return leftBreakPoint(rArc,directrix);var site=arc.site;return site[1]===directrix?site[0]:Infinity}
var epsilon=1e-6;var epsilon2=1e-12;var beaches;var cells;var circles;var edges;function triangleArea(a,b,c){return(a[0]-c[0])*(b[1]-a[1])-(a[0]-b[0])*(c[1]-a[1])}
function lexicographic(a,b){return b[1]-a[1]||b[0]-a[0]}
function Diagram(sites,extent){var site=sites.sort(lexicographic).pop(),x,y,circle;edges=[];cells=new Array(sites.length);beaches=new RedBlackTree;circles=new RedBlackTree;while(!0){circle=firstCircle;if(site&&(!circle||site[1]<circle.y||(site[1]===circle.y&&site[0]<circle.x))){if(site[0]!==x||site[1]!==y){addBeach(site);x=site[0],y=site[1]}
site=sites.pop()}else if(circle){removeBeach(circle.arc)}else{break}}
sortCellHalfedges();if(extent){var x0=+extent[0][0],y0=+extent[0][1],x1=+extent[1][0],y1=+extent[1][1];clipEdges(x0,y0,x1,y1);clipCells(x0,y0,x1,y1)}
this.edges=edges;this.cells=cells;beaches=circles=edges=cells=null}
Diagram.prototype={constructor:Diagram,polygons:function(){var edges=this.edges;return this.cells.map(function(cell){var polygon=cell.halfedges.map(function(i){return cellHalfedgeStart(cell,edges[i])});polygon.data=cell.site.data;return polygon})},triangles:function(){var triangles=[],edges=this.edges;this.cells.forEach(function(cell,i){if(!(m=(halfedges=cell.halfedges).length))return;var site=cell.site,halfedges,j=-1,m,s0,e1=edges[halfedges[m-1]],s1=e1.left===site?e1.right:e1.left;while(++j<m){s0=s1;e1=edges[halfedges[j]];s1=e1.left===site?e1.right:e1.left;if(s0&&s1&&i<s0.index&&i<s1.index&&triangleArea(site,s0,s1)<0){triangles.push([site.data,s0.data,s1.data])}}});return triangles},links:function(){return this.edges.filter(function(edge){return edge.right}).map(function(edge){return{source:edge.left.data,target:edge.right.data}})},find:function(x,y,radius){var that=this,i0,i1=that._found||0,n=that.cells.length,cell;while(!(cell=that.cells[i1]))if(++i1>=n)return null;var dx=x-cell.site[0],dy=y-cell.site[1],d2=dx*dx+dy*dy;do{cell=that.cells[i0=i1],i1=null;cell.halfedges.forEach(function(e){var edge=that.edges[e],v=edge.left;if((v===cell.site||!v)&&!(v=edge.right))return;var vx=x-v[0],vy=y-v[1],v2=vx*vx+vy*vy;if(v2<d2)d2=v2,i1=v.index})}while(i1!==null);that._found=i0;return radius==null||d2<=radius*radius?cell.site:null}};function voronoi(){var x$$1=x,y$$1=y,extent=null;function voronoi(data){return new Diagram(data.map(function(d,i){var s=[Math.round(x$$1(d,i,data)/epsilon)*epsilon,Math.round(y$$1(d,i,data)/epsilon)*epsilon];s.index=i;s.data=d;return s}),extent)}
voronoi.polygons=function(data){return voronoi(data).polygons()};voronoi.links=function(data){return voronoi(data).links()};voronoi.triangles=function(data){return voronoi(data).triangles()};voronoi.x=function(_){return arguments.length?(x$$1=typeof _==="function"?_:constant(+_),voronoi):x$$1};voronoi.y=function(_){return arguments.length?(y$$1=typeof _==="function"?_:constant(+_),voronoi):y$$1};voronoi.extent=function(_){return arguments.length?(extent=_==null?null:[[+_[0][0],+_[0][1]],[+_[1][0],+_[1][1]]],voronoi):extent&&[[extent[0][0],extent[0][1]],[extent[1][0],extent[1][1]]]};voronoi.size=function(_){return arguments.length?(extent=_==null?null:[[0,0],[+_[0],+_[1]]],voronoi):extent&&[extent[1][0]-extent[0][0],extent[1][1]-extent[0][1]]};return voronoi}
class VoronoiMolecule extends Triangle{constructor(points,circumcenter,edgeNormal){super(points,circumcenter);this.isEdge=!1;this.isCorner=!1;this.overlaped=[];this.hull=new ConvexPolygon().convexHull([points[0],points[1],points[2],circumcenter].filter(function(el){return el!==undefined}));this.units=this.points.map(function(el,i){var nextEl=this.points[(i+1)%this.points.length];return new VoronoiMoleculeTriangle(circumcenter,[el,nextEl])},this);var pointsLength=this.points.length;switch(pointsLength){case 1:this.isCorner=!0;this.addCornerMolecules();break;case 2:this.isEdge=!0;this.units=this.units.filter(function(el){var cross=(el.vertex.y-el.base[0].y)*(el.base[1].x-el.base[0].x)-(el.vertex.x-el.base[0].x)*(el.base[1].y-el.base[0].y);if(cross<0){return!1}
return!0},this);this.addEdgeMolecules(edgeNormal);break}
var eclipsed=undefined;this.units=this.units.filter(function(el){var cross=(el.vertex.y-el.base[0].y)*(el.base[1].x-el.base[0].x)-(el.vertex.x-el.base[0].x)*(el.base[1].y-el.base[0].y);if(cross<0){eclipsed=el;return!1}
return!0},this);if(eclipsed!==undefined){var angle=clockwiseInteriorAngle(eclipsed.vertex.subtract(eclipsed.base[1]),eclipsed.base[0].subtract(eclipsed.base[1]));this.units.forEach(function(el){el.crimpAngle-=angle})}}
addEdgeMolecules(normal){this.edgeNormal=normal.normalize().abs();if(this.units.length<1){return}
var base=this.units[0].base;var reflected=base.map(function(b){var diff=this.circumcenter.subtract(b);var change=diff.multiply(this.edgeNormal).scale(2);return b.add(change)},this);this.units=this.units.concat([new VoronoiMoleculeTriangle(this.circumcenter,[base[1],reflected[1]]),new VoronoiMoleculeTriangle(this.circumcenter,[reflected[0],base[0]])])}
addCornerMolecules(){}
generateCreases(){var edges=[];var outerEdges=this.units.map(function(el,i){var nextEl=this.units[(i+1)%this.units.length];if(el.base[1].equivalent(nextEl.base[0])){edges.push(new Edge(el.base[1],el.vertex))}},this);var creases=this.units.map(function(el){return el.generateCrimpCreaseLines()});creases.forEach(function(el){edges=edges.concat(el)},this);if(this.isObtuse()){this.units.forEach(function(el,i){var nextEl=this.units[(i+1)%this.units.length];if(el.base[0].equivalent(el.base[1])){edges.push(new Edge(el.base[0],el.vertex))}},this)}
return edges}}
class VoronoiMoleculeTriangle{constructor(vertex,base,crimpAngle){this.vertex=vertex;this.base=base;this.crimpAngle=crimpAngle;this.overlapped=[];if(this.crimpAngle===undefined){var vec1=base[1].subtract(base[0]);var vec2=vertex.subtract(base[0]);var a1=clockwiseInteriorAngle(vec1,vec2);var a2=clockwiseInteriorAngle(vec2,vec1);this.crimpAngle=(a1<a2)?a1:a2}}
crimpLocations(){var baseAngle=Math.atan2(this.base[1].y-this.base[0].y,this.base[1].x-this.base[0].x);var crimpVector=new XY(Math.cos(baseAngle+this.crimpAngle),Math.sin(baseAngle+this.crimpAngle));var bisectVector=new XY(Math.cos(baseAngle+this.crimpAngle*0.5),Math.sin(baseAngle+this.crimpAngle*0.5));var symmetryLine=new Edge(this.vertex,this.base[0].midpoint(this.base[1]));var crimpPos=intersectionRayEdge(new Ray(this.base[0],crimpVector),symmetryLine);var bisectPos=intersectionRayEdge(new Ray(this.base[0],bisectVector),symmetryLine);return[crimpPos,bisectPos]}
generateCrimpCreaseLines(){var crimps=this.crimpLocations();var symmetryLine=new Edge(this.vertex,this.base[0].midpoint(this.base[1]));if(this.overlapped.length>0){symmetryLine.nodes[1]=this.overlapped[0].circumcenter}
var overlappingEdges=[symmetryLine].concat(this.overlapped.map(function(el){return el.generateCreases()}).reduce(function(prev,curr){return prev.concat(curr)},[]));var edges=[symmetryLine].concat(new Polyline().rayReflectRepeat(new Ray(this.base[0],this.base[1].subtract(this.base[0])),overlappingEdges,this.base[1]).edges());crimps.filter(function(el){return el!==undefined&&!el.equivalent(this.vertex)},this).forEach(function(crimp){edges=edges.concat(new Polyline().rayReflectRepeat(new Ray(this.base[0],crimp.subtract(this.base[0])),overlappingEdges,this.base[1]).edges())},this);return edges}
pointInside(p){var points=[this.vertex,this.base[0],this.base[1]];for(var i=0;i<points.length;i++){var p0=points[i];var p1=points[(i+1)%points.length];var cross=(p.y-p0.y)*(p1.x-p0.x)-(p.x-p0.x)*(p1.y-p0.y);if(cross<0)return!1}
return!0}}
class VoronoiEdge{}
class VoronoiCell{constructor(){this.points=[];this.edges=[]}}
class VoronoiJunction{constructor(){this.edges=[];this.cells=[];this.isEdge=!1;this.isCorner=!1}}
class VoronoiGraph{edgeExists(points,epsilon){if(epsilon===undefined){epsilon=EPSILON_HIGH}
this.edges.forEach(function(el){if(el.endPoints[0].equivalent(points[0],epsilon)&&el.endPoints[1].equivalent(points[1],epsilon)){return el}
if(el.endPoints[1].equivalent(points[0],epsilon)&&el.endPoints[0].equivalent(points[1],epsilon)){return el}});return undefined}
constructor(points,bounds,epsilon){var boundsArray=[[bounds.origin.x,bounds.origin.y],[bounds.size.width,bounds.size.height]];var voronoiAlgorithm=voronoi().extent(boundsArray);var v=voronoiAlgorithm(points);var containsXY=function(a,object){return(a.filter(function(e){return e.equivalent(object,epsilon)}).length>0)};if(epsilon===undefined){epsilon=EPSILON_HIGH}
var allPoints=v.edges.map(function(e){return[new XY(e[0][0],e[0][1]),new XY(e[1][0],e[1][1])]}).reduce(function(prev,curr){return prev.concat(curr)},[]);var hull=new ConvexPolygon().convexHull(allPoints);this.edges=[];this.junctions=[];this.cells=[];this.edges=v.edges.map(function(el){var edge=new VoronoiEdge();edge.endPoints=[new XY(el[0][0],el[0][1]),new XY(el[1][0],el[1][1])];edge.cache={'left':el.left,'right':el.right};return edge});this.cells=v.cells.map(function(c){var cell=new VoronoiCell();cell.site=new XY(c.site[0],c.site[1]);cell.edges=c.halfedges.map(function(hf){return this.edges[hf]},this);cell.points=cell.edges.map(function(el,i){var a=el.endPoints[0];var b=el.endPoints[1];var nextA=cell.edges[(i+1)%cell.edges.length].endPoints[0];var nextB=cell.edges[(i+1)%cell.edges.length].endPoints[1];if(a.equivalent(nextA,epsilon)||a.equivalent(nextB,epsilon)){return b}
return a},this);return cell},this);this.edges.forEach(function(el){var thisCells=[undefined,undefined];if(el.cache.left!==undefined){var leftSite=new XY(el.cache.left[0],el.cache.left[1]);for(var i=0;i<this.cells.length;i++){if(leftSite.equivalent(this.cells[i].site,epsilon)){thisCells[0]=this.cells[i];break}}}
if(el.cache.right!==undefined){var rightSite=new XY(el.cache.right[0],el.cache.right[1]);for(var i=0;i<this.cells.length;i++){if(rightSite.equivalent(this.cells[i].site,epsilon)){thisCells[1]=this.cells[i];break}}}
el.cells=thisCells;el.isBoundary=!1;if(el.cells[0]===undefined||el.cells[1]===undefined){el.isBoundary=!0}
el.cache={}},this);var nodes=[];this.edges.forEach(function(el){if(!containsXY(nodes,el.endPoints[0])){nodes.push(el.endPoints[0])}
if(!containsXY(nodes,el.endPoints[1])){nodes.push(el.endPoints[1])}},this);this.junctions=nodes.map(function(el){var junction=new VoronoiJunction();junction.position=el;junction.cells=this.cells.filter(function(cell){return containsXY(cell.points,el)},this).sort(function(a,b){var vecA=a.site.subtract(el);var vecB=b.site.subtract(el);return Math.atan2(vecA.y,vecA.x)-Math.atan2(vecB.y,vecB.x)});switch(junction.cells.length){case 1:junction.isCorner=!0;break;case 2:junction.isEdge=!0;hull.edges.forEach(function(edge){if(edge.collinear(junction.position)){junction.edgeNormal=edge.nodes[1].subtract(edge.nodes[0]).rotate90()}});break}
junction.edges=this.edges.filter(function(edge){return containsXY(edge.endPoints,el)},this).sort(function(a,b){var otherA=a.endPoints[0];if(otherA.equivalent(el)){otherA=a.endPoints[1]}
var otherB=b.endPoints[0];if(otherB.equivalent(el)){otherB=b.endPoints[1]}
var vecA=otherA.subtract(el);var vecB=otherB.subtract(el);return Math.atan2(vecA.y,vecA.x)-Math.atan2(vecB.y,vecB.x)});return junction},this);return this}
generateMolecules(interp){return this.junctions.map(function(j){var endPoints=j.cells.map(function(cell){return cell.site.lerp(j.position,interp)},this);var molecule=new VoronoiMolecule(endPoints,j.position,j.isEdge?j.edgeNormal:undefined);return molecule},this)}
generateSortedMolecules(interp){var molecules=this.generateMolecules(interp);for(var i=0;i<molecules.length;i++){for(var j=0;j<molecules.length;j++){if(i!==j){molecules[j].units.forEach(function(unit){if(unit.pointInside(molecules[i].circumcenter)){unit.overlapped.push(molecules[i]);molecules[j].overlaped.push(molecules[i])}})}}}
for(var i=0;i<molecules.length;i++){molecules[i].units.forEach(function(unit){unit.overlapped.sort(function(a,b){return a.circumcenter.distanceTo(unit.vertex)-b.circumcenter.distanceTo(unit.vertex)})});molecules[i].overlaped.sort(function(a,b){return a.circumcenter.distanceTo(molecules[i].circumcenter)-b.circumcenter.distanceTo(molecules[i].circumcenter)})}
var array=[];var mutableMolecules=molecules.slice();var rowIndex=0;while(mutableMolecules.length>0){array.push([]);for(var i=mutableMolecules.length-1;i>=0;i--){if(mutableMolecules[i].overlaped.length<=rowIndex){array[rowIndex].push(mutableMolecules[i]);mutableMolecules.splice(i,1)}}
rowIndex++}
return array}}
function creaseVoronoi(cp,v,interp){if(interp===undefined){interp=0.5}
var edges=v.edges.filter(function(el){return!el.isBoundary});var cells=v.cells.map(function(cell){return cell.edges.map(function(edge){return edge.endPoints.map(function(el){return cell.site.lerp(el,interp)})},this)},this);var sortedMolecules=v.generateSortedMolecules(interp);sortedMolecules.forEach(function(arr){arr.forEach(function(m){var edges=m.generateCreases();edges.forEach(function(el){cp.crease(el.nodes[0],el.nodes[1])},this)},this)},this);edges.forEach(function(edge){var c=cp.crease(edge.endPoints[0],edge.endPoints[1]);if(c!==undefined){c.valley()}},this);cells.forEach(function(cell){cell.forEach(function(edge){var crease=cp.crease(edge[0],edge[1]);if(crease!=undefined){crease.mountain()}},this)},this);if(sortedMolecules.length==0){return[]}
return sortedMolecules.reduce(function(prev,current){return prev.concat(current)})}
var svgNS='http://www.w3.org/2000/svg';var line=function(x1,y1,x2,y2,className,id){var line=document.createElementNS(svgNS,'line');line.setAttributeNS(null,'x1',x1);line.setAttributeNS(null,'y1',y1);line.setAttributeNS(null,'x2',x2);line.setAttributeNS(null,'y2',y2);if(className!=undefined){line.setAttributeNS(null,'class',className)}
if(id!=undefined){line.setAttributeNS(null,'id',id)}
return line};var circle=function(x,y,radius,className,id){var dot=document.createElementNS(svgNS,'circle');dot.setAttributeNS(null,'cx',x);dot.setAttributeNS(null,'cy',y);dot.setAttributeNS(null,'r',radius);if(className!=undefined){dot.setAttributeNS(null,'class',className)}
if(id!=undefined){dot.setAttributeNS(null,'id',id)}
return dot};var polygon=function(pointArray,className,id){var pointsString=pointArray.map(function(el){return(el.constructor===Array)?el:[el.x,el.y]}).reduce(function(prev,curr){return prev+curr[0]+","+curr[1]+" "},"");var polygon=document.createElementNS(svgNS,'polygon');polygon.setAttributeNS(null,'points',pointsString);if(className!=undefined){polygon.setAttributeNS(null,'class',className)}
if(id!=undefined){polygon.setAttributeNS(null,'id',id)}
return polygon};var bezier=function(fromX,fromY,c1X,c1Y,c2X,c2Y,toX,toY,className,id){var d='M '+fromX+','+fromY+' C '+c1X+','+c1Y+' '+c2X+','+c2Y+' '+toX+','+toY;var path=document.createElementNS(svgNS,"path");path.setAttributeNS(null,'d',d);if(className!=undefined){path.setAttributeNS(null,'class',className)}
if(id!=undefined){path.setAttributeNS(null,'id',id)}
return path};var group=function(className,id){var group=document.createElementNS(svgNS,'g');if(className!=undefined){group.setAttributeNS(null,'class',className)}
if(id!=undefined){group.setAttributeNS(null,'id',id)}
return group};var SVG=function(className,id){var svg=document.createElementNS(svgNS,'svg');svg.setAttributeNS(null,'viewBox','0 0 1 1');if(className!=undefined){svg.setAttributeNS(null,'class',className)}
if(id!=undefined){svg.setAttributeNS(null,'id',id)}
return svg};var addClass=function(xmlNode,newClass){if(xmlNode==undefined){return}
var currentClass=xmlNode.getAttribute('class');if(currentClass==undefined){currentClass=""}
var classes=currentClass.split(' ').filter(function(c){return c!=newClass},this);classes.push(newClass);xmlNode.setAttributeNS(null,'class',classes.join(' '))};var removeClass=function(xmlNode,newClass){if(xmlNode==undefined){return}
var currentClass=xmlNode.getAttribute('class');if(currentClass==undefined){currentClass=""}
var classes=currentClass.split(' ').filter(function(c){return c!=newClass},this);xmlNode.setAttributeNS(null,'class',classes.join(' '))};var convertToViewbox=function(svg,x,y){var pt=svg.createSVGPoint();pt.x=x;pt.y=y;var svgPoint=pt.matrixTransform(svg.getScreenCTM().inverse());return{x:svgPoint.x,y:svgPoint.y}};var svgNS$1='http://www.w3.org/2000/svg';class OrigamiPaper{onResize(event){}
animate(event){}
onMouseDown(event){}
onMouseUp(event){}
onMouseMove(event){}
onMouseDidBeginDrag(event){}
constructor(){var args=[];for(var i=0;i<arguments.length;i++){args.push(arguments[i])}
this.cp=args.filter(function(arg){return arg instanceof PlanarGraph},this).shift();if(this.cp==undefined){this.cp=new CreasePattern()}
this.svg=SVG();var that=this;document.addEventListener("DOMContentLoaded",function(){var parent=args.filter(function(arg){return arg instanceof HTMLElement},this).shift();if(parent==undefined){var idString=args.filter(function(a){return typeof a==='string'||a instanceof String},that).shift();if(idString!=undefined){parent=document.getElementById(idString)}}
if(parent==undefined){parent=document.body}
parent.appendChild(that.svg)});this.line=line;this.circle=circle;this.polygon=polygon;this.bezier=bezier;this.group=group;this.SVG=SVG;this.addClass=addClass;this.removeClass=removeClass;this.convertToViewbox=convertToViewbox;this.facesLayer=this.group(null,'faces');this.junctionsLayer=this.group(null,'junctions');this.sectorsLayer=this.group(null,'sectors');this.edgesLayer=this.group(null,'creases');this.boundaryLayer=this.group(null,'boundary');this.nodesLayer=this.group(null,'nodes');this.svg.appendChild(this.boundaryLayer);this.svg.appendChild(this.facesLayer);this.svg.appendChild(this.junctionsLayer);this.svg.appendChild(this.sectorsLayer);this.svg.appendChild(this.edgesLayer);this.svg.appendChild(this.nodesLayer);this.padding=0.01;this.mouse={position:{'x':0,'y':0},pressed:{'x':0,'y':0},isPressed:!1,isDragging:!1};this.style={node:{radius:0.01},sector:{scale:0.5},face:{scale:1.0},selected:{node:{radius:0.02},edge:{strokeColor:{hue:0,saturation:0.8,brightness:1}},face:{fillColor:{hue:0,saturation:0.8,brightness:1}}}};this.draw();this.svg.onmousedown=function(event){that.mouse.isPressed=!0;that.mouse.isDragging=!1;that.mouse.pressed=that.convertToViewbox(that.svg,event.clientX,event.clientY);that.onMouseDown({point:Object.assign({},that.mouse.pressed)})};this.svg.onmouseup=function(event){that.mouse.isPressed=!1;that.mouse.isDragging=!1;that.selectedTouchPoint=undefined;that.onMouseUp({point:that.convertToViewbox(that.svg,event.clientX,event.clientY)})};this.svg.onmousemove=function(event){that.mouse.position=that.convertToViewbox(that.svg,event.clientX,event.clientY);if(that.mouse.isPressed){if(that.mouse.isDragging===!1){that.mouse.isDragging=!0;that.onMouseDidBeginDrag({point:Object.assign({},that.mouse.position)})}}
that.onMouseMove({point:Object.assign({},that.mouse.position)})};this.svg.onResize=function(event){that.onResize(event)};var frameNum=0;this.animateTimer=setInterval(function(){that.animate({'time':that.svg.getCurrentTime(),'frame':frameNum});frameNum+=1},1000/60)}
setPadding(padding){if(padding!=undefined){this.padding=padding;this.setViewBox()}
return this}
setViewBox(){var bounds=this.cp.boundaryBounds();this.svg.setAttribute("viewBox",(-this.padding+bounds.origin.x)+" "+(-this.padding+bounds.origin.y)+" "+(bounds.size.width+this.padding*2)+" "+(bounds.size.height+this.padding*2))}
get(component){if(component instanceof GraphNode){return this.nodesLayer.childNodes[component.index]}
if(component instanceof GraphEdge){return this.edgesLayer.childNodes[component.index]}
if(component instanceof PlanarFace){return this.facesLayer.childNodes[component.index]}
if(component instanceof PlanarSector){return this.sectorsLayer.childNodes[component.index]}
return document.createElement('void')}
showNodes(){origami.nodesLayer.setAttribute('display','')}
showEdges(){origami.edgesLayer.setAttribute('display','')}
showFaces(){origami.facesLayer.setAttribute('display','')}
showSectors(){origami.sectorsLayer.setAttribute('display','')}
hideNodes(){origami.nodesLayer.setAttribute('display','none')}
hideEdges(){origami.nodesLayer.setAttribute('display','none')}
hideFaces(){origami.nodesLayer.setAttribute('display','none')}
hideSectors(){origami.nodesLayer.setAttribute('display','none')}
update(){this.edgesLayer.childNodes.forEach(function(edge,i){if(this.cp.edges[i]!=undefined){edge.setAttributeNS(null,'class',this.cp.edges[i].orientation)}},this);this.facesLayer.childNodes.forEach(function(face){face.setAttributeNS(null,'class','face')},this);this.nodesLayer.childNodes.forEach(function(node){node.setAttributeNS(null,'class','node')},this);this.sectorsLayer.childNodes.forEach(function(sector){sector.setAttributeNS(null,'class','sector')},this);this.junctionsLayer.childNodes.forEach(function(junction){junction.setAttributeNS(null,'class','junction')},this)}
draw(){this.setViewBox();[this.boundaryLayer,this.facesLayer,this.junctionsLayer,this.sectorsLayer,this.edgesLayer,this.nodesLayer].forEach(function(layer){while(layer.lastChild){layer.removeChild(layer.lastChild)}},this);var pointsString=this.cp.boundary.nodes().reduce(function(prev,curr){return prev+curr.x+","+curr.y+" "},"");var boundaryPolygon=document.createElementNS(svgNS$1,'polygon');boundaryPolygon.setAttributeNS(null,'class','boundary');boundaryPolygon.setAttributeNS(null,'points',pointsString);this.boundaryLayer.appendChild(boundaryPolygon);this.cp.nodes.forEach(function(node){this.addNode(node)},this);this.cp.edges.forEach(function(edge){this.addEdge(edge)},this);this.cp.faces.forEach(function(face){this.addFace(face)},this);this.cp.junctions.forEach(function(junction){this.addJunction(junction);var radius=this.style.sector.scale*junction.sectors.map(function(el){return el.edges[0].length()},this).sort(function(a,b){return a-b}).shift();junction.sectors.forEach(function(sector){this.addSector(sector,radius)},this)},this)}
addNode(node){var dot=this.circle(node.x,node.y,this.style.node.radius,'node','node-'+node.index);this.nodesLayer.appendChild(dot)}
addEdge(edge){var creaseline=this.line(edge.nodes[0].x,edge.nodes[0].y,edge.nodes[1].x,edge.nodes[1].y,edge.orientation,'edge-'+edge.index);this.edgesLayer.appendChild(creaseline)}
addFace(face){function lerp(a,b,pct){var l=b-a;return a+l*(1-pct)}
var centroid=face.centroid();var points=face.nodes.map(function(el){return[lerp(el.x,centroid.x,this.style.face.scale),lerp(el.y,centroid.y,this.style.face.scale)]},this);var poly=this.polygon(points,'face','face-'+face.index);this.facesLayer.appendChild(poly)}
addSector(sector,radius){var origin=sector.origin;var v=sector.endPoints.map(function(vec){return vec.subtract(origin).normalize().scale(radius)},this);var arcVec=v[1].subtract(v[0]);var arc=Math.atan2(v[0].x*v[1].y-v[0].y*v[1].x,v[0].x*v[1].x+v[0].y*v[1].y)>0?0:1;var d='M '+origin.x+','+origin.y+' l '+v[0].x+','+v[0].y+' ';d+=['a ',radius,radius,0,arc,1,arcVec.x,arcVec.y].join(' ');d+=' Z';var path=document.createElementNS(svgNS$1,"path");path.setAttributeNS(null,'d',d);path.setAttributeNS(null,'class','sector');path.setAttributeNS(null,'id','sector-'+sector.index);this.sectorsLayer.appendChild(path)}
addJunction(junction){}
load(input,callback){var that=this;if(typeof input==='string'||input instanceof String){var extension=input.substr((input.lastIndexOf('.')+1));switch(extension){case 'fold':fetch(input).then(function(response){return response.json()}).then(function(data){that.cp.importFoldFile(data);that.draw();if(callback!=undefined){callback(that.cp)}});return that;case 'svg':fetch(input).then(response=>response.text()).then(function(string){that.cp=new SVGLoader(string);that.draw();if(callback!=undefined){callback(that.cp)}});return that;case 'opx':fetch(input).then(response=>response.text()).then(function(string){var foldFile=FOLD.convert.convertFromTo(string,"opx","fold");that.cp.importFoldFile(foldFile);that.draw();if(callback!=undefined){callback(that.cp)}});return that}}
try{var foldFile=JSON.parse(input);this.cp.importFoldFile(foldFile);return this}catch(err){try{this.cp=new SVGLoader(input);this.draw();return this}
catch(err){console.log("can't recognize file")}}
return this}}
class OrigamiFold{onResize(event){}
animate(event){}
onMouseDown(event){}
onMouseUp(event){}
onMouseMove(event){}
onMouseDidBeginDrag(event){}
constructor(){var args=[];for(var i=0;i<arguments.length;i++){args.push(arguments[i])}
this.cp=args.filter(function(arg){return arg instanceof PlanarGraph},this).shift();if(this.cp==undefined){this.cp=new CreasePattern()}
this.svg=SVG();var that=this;document.addEventListener("DOMContentLoaded",function(){var parent=args.filter(function(arg){return arg instanceof HTMLElement},this).shift();if(parent==undefined){var idString=args.filter(function(a){return typeof a==='string'||a instanceof String},that).shift();if(idString!=undefined){parent=document.getElementById(idString)}}
if(parent==undefined){parent=document.body}
parent.appendChild(that.svg)});this.line=line;this.circle=circle;this.polygon=polygon;this.group=group;this.SVG=SVG;this.addClass=addClass;this.removeClass=removeClass;this.convertToViewbox=convertToViewbox;this.facesLayer=group(null,'faces');this.junctionsLayer=group(null,'junctions');this.sectorsLayer=group(null,'sectors');this.edgesLayer=group(null,'creases');this.boundaryLayer=group(null,'boundary');this.nodesLayer=group(null,'nodes');this.svg.appendChild(this.boundaryLayer);this.svg.appendChild(this.facesLayer);this.svg.appendChild(this.junctionsLayer);this.svg.appendChild(this.sectorsLayer);this.svg.appendChild(this.edgesLayer);this.svg.appendChild(this.nodesLayer);this.holdPoint=undefined;this.padding=0.0;this.mouseZoom=!0;this.zoom=1.0;this.rotation=0;this.bounds={'origin':{'x':0,'y':0},'size':{'width':1.0,'height':1.0}};this.mouse={position:{'x':0,'y':0},pressed:{'x':0,'y':0},isPressed:!1,isDragging:!1};this.style={};this.draw();var that=this;this.svg.onmousedown=function(event){that.mouse.isPressed=!0;that.mouse.isDragging=!1;that.mouse.pressed=convertToViewbox(that.svg,event.clientX,event.clientY);that.zoomOnMousePress=that.zoom;that.rotationOnMousePress=that.rotation;that.onMouseDown({point:Object.assign({},that.mouse.pressed)})};this.svg.onmouseup=function(event){that.mouse.isPressed=!1;that.mouse.isDragging=!1;that.selectedTouchPoint=undefined;that.onMouseUp({point:convertToViewbox(that.svg,event.clientX,event.clientY)})};this.svg.onmousemove=function(event){that.mouse.position=convertToViewbox(that.svg,event.clientX,event.clientY);if(that.mouse.isPressed){if(that.mouse.isDragging==!1){that.mouse.isDragging=!0;that.onMouseDidBeginDrag({point:Object.assign({},that.mouse.position)})}
if(that.mouseZoom){that.zoom=that.zoomOnMousePress+0.01*(that.mouse.pressed.y-that.mouse.position.y);that.rotation=that.rotationOnMousePress+(that.mouse.pressed.x-that.mouse.position.x);if(that.zoom<0.02){that.zoom=0.02}
if(that.zoom>100){that.zoom=100}
that.setViewBox()}}
that.onMouseMove({point:Object.assign({},that.mouse.position)})};this.svg.onResize=function(event){that.onResize(event)}}
reset(){this.zoom=1.0;this.rotation=0;this.setViewBox()}
getBounds(){if(this.foldedCP===undefined){this.bounds={'origin':{'x':0,'y':0},'size':{'width':1.0,'height':1.0}};return}
var minX=Infinity;var minY=Infinity;var maxX=-Infinity;var maxY=-Infinity;this.foldedCP.vertices_coords.forEach(function(point){if(point[0]>maxX){maxX=point[0]}
if(point[0]<minX){minX=point[0]}
if(point[1]>maxY){maxY=point[1]}
if(point[1]<minY){minY=point[1]}},this);this.bounds={'origin':{'x':minX,'y':minY},'size':{'width':maxX-minX,'height':maxY-minY}}}
setPadding(padding){if(padding!=undefined){this.padding=padding;this.setViewBox()}
return this}
setViewBox(){this.getBounds();this.svg.setAttribute("viewBox",(-this.padding+this.bounds.origin.x)+" "+(-this.padding+this.bounds.origin.y)+" "+(this.bounds.size.width+this.padding*2)+" "+(this.bounds.size.height+this.padding*2))}
update(){this.facesLayer.childNodes.forEach(function(face){face.setAttributeNS(null,'class','folded-face')},this)}
draw(groundFace){this.setViewBox();if(this.holdPoint!=undefined){groundFace=this.cp.nearest(this.holdPoint).face}
this.foldedCP=this.cp.fold(groundFace);this.getBounds();this.faces=[];[this.boundaryLayer,this.facesLayer,this.junctionsLayer,this.sectorsLayer,this.edgesLayer,this.nodesLayer].forEach(function(layer){while(layer.lastChild){layer.removeChild(layer.lastChild)}},this);if(this.foldedCP!=undefined){this.foldedCP.faces_vertices.map(function(face){return face.map(function(nodeIndex){return this.foldedCP.vertices_coords[nodeIndex]},this)},this).forEach(function(faceNodes,i){this.addFace(faceNodes)},this)}
this.setViewBox()}
addFace(vertices,index){var polygon$$1=polygon(vertices,'folded-face','face-'+index);this.facesLayer.appendChild(polygon$$1)}
load(input,callback){var that=this;if(typeof input==='string'||input instanceof String){var extension=input.substr((input.lastIndexOf('.')+1));switch(extension){case 'fold':fetch(input).then(function(response){return response.json()}).then(function(data){that.cp.importFoldFile(data);that.draw();if(callback!=undefined){callback(that.cp)}});return that;case 'svg':fetch(input).then(response=>response.text()).then(function(string){that.cp=new SVGLoader(string);that.draw();if(callback!=undefined){callback(that.cp)}});return that;case 'opx':fetch(input).then(response=>response.text()).then(function(string){var foldFile=FOLD.convert.convertFromTo(string,"opx","fold");that.cp.importFoldFile(foldFile);that.draw();if(callback!=undefined){callback(that.cp)}});return that}}
try{var foldFile=JSON.parse(input);this.cp.importFoldFile(foldFile);return this}catch(err){try{this.cp=new SVGLoader(input);this.draw();return this}
catch(err){console.log("can't recognize file")}}
return this}}
window.CreasePattern=CreasePattern;window.OrigamiPaper=OrigamiPaper;window.OrigamiFold=OrigamiFold;exports.CreasePattern=CreasePattern;exports.OrigamiPaper=OrigamiPaper;exports.OrigamiFold=OrigamiFold;exports.VoronoiGraph=VoronoiGraph;exports.creaseVoronoi=creaseVoronoi;exports.line=line;exports.circle=circle;exports.polygon=polygon;exports.group=group;exports.addClass=addClass;exports.removeClass=removeClass;exports.Geometry=geometry;Object.defineProperty(exports,'__esModule',{value:!0})})))